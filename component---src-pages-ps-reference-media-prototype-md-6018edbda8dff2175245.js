"use strict";(self.webpackChunkuxp_photoshop_documentation=self.webpackChunkuxp_photoshop_documentation||[]).push([[75823],{11457:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return s},default:function(){return h}});var o=a(87462),n=a(63366),r=(a(15007),a(64983)),p=a(91515),l=["components"],s={},m={_frontmatter:s},i=p.Z;function h(e){var t=e.components,a=(0,n.Z)(e,l);return(0,r.mdx)(i,(0,o.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"prototype"},"Prototype"),(0,r.mdx)("p",null,"We build the DOM APIs with a lot of intent and care to work around expectations Photoshop may have when a command is being ",(0,r.mdx)("a",{parentName:"p",href:"./batchplay"},"batchPlayed"),". "),(0,r.mdx)("p",null,"Photoshop is full of functionality and while we strive to bring all of them into the user-friendly DOM, some may not be ready as you're writing your plug-ins."),(0,r.mdx)("p",null,"Further, you may have a different or unique way of scripting Photoshop and may want to add more properties and methods to the provided DOM classes."),(0,r.mdx)("p",null,"This is where ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes"},"prototypes")," come in to play. In JavaScript, prototypes define what methods and properties are inherited by an object. Properties can be attached to a prototype to ensure that every instance of that object will have those properties. "),(0,r.mdx)("p",null,"You can overload the many classes' prototype at the start or launch of your plugin or via a library you wrote that is loaded before your code."),(0,r.mdx)("p",null,"As a plug-in developer, you have access to these prototypes:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"../../classes/photoshop"},"app.Photoshop")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"../../classes/document"},"app.Document")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"../../classes/layer"},"app.Layer")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"../../classes/actionset"},"app.ActionSet")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"../../classes/action"},"app.Action"))),(0,r.mdx)("p",null,"For example, suppose you want to add a new method to ",(0,r.mdx)("a",{parentName:"p",href:"../../classes/document"},"Document")," which renames all layers, prepending '_' to them. You can run the following at the start of your plug-in."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"require('photoshop').app.Document.prototype.prependLodash = function () {\n  // `this` will be the instance of Document you're calling the method on\n  this.layers.forEach(l => {\n    l.name = '_' + l.name\n  })\n}\n")),(0,r.mdx)("p",null,"Then, when you want to perform this on any document, you can call it on the instance of that document:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"require('photoshop').app.activeDocument.prependLodash() // All layers in the document will be renamed\n")))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-ps-reference-media-prototype-md-6018edbda8dff2175245.js.map