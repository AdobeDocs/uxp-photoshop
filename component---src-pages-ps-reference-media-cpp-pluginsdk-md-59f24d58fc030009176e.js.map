{"version":3,"file":"component---src-pages-ps-reference-media-cpp-pluginsdk-md-59f24d58fc030009176e.js","mappings":"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","sources":["webpack://uxp-photoshop-documentation/./src/pages/ps_reference/media/cpp-pluginsdk.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"bridging-your-c-plugin-with-uxp\"\n    }}>{`Bridging your C++ Plugin with UXP`}</h1>\n    <p>{`For developers with the intent to utilize the C++ based plugin SDK in conjunction with a UXP based plugin, the C++ SDK now includes a method to communicate with its UXP counterpart. On C++ side, we use the component's plugin name property in the plugin resource to identify plugins, and on UXP side, we use the `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` field from the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{` file.`}</p>\n    <h2 {...{\n      \"id\": \"obtain-the-photoshop-c-sdk\"\n    }}>{`Obtain the Photoshop C++ SDK`}</h2>\n    <p>{`Start by obtaining a copy of the Photoshop SDK from `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/photoshop/\"\n      }}>{`Adobe Developer`}</a>{`. You can find detailed instructions under the `}<inlineCode parentName=\"p\">{`C++ SDK`}</inlineCode>{` heading.`}</p>\n    <h2 {...{\n      \"id\": \"piuxpsuite\"\n    }}>{`PIUXPSuite`}</h2>\n    <p>{`The PIUXPSuite communicates with UXP plugins using PIActionDescriptors. Use the ActionDescriptor suite as defined in the SDK's `}<inlineCode parentName=\"p\">{`PIAction.h`}</inlineCode>{` whenever using this suite. To start, add `}<inlineCode parentName=\"p\">{`PIUXPSuite.h`}</inlineCode>{` from the Photoshop C++ SDK to your plugin project.`}</p>\n    <p>{`The signatures in `}<inlineCode parentName=\"p\">{`PIUXPSuite.h`}</inlineCode>{` are as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`typedef void (*PIUXPMessageNotifier)(PIActionDescriptor descriptor);\ntypedef struct PsUXPSuite1\n{\n    SPAPI SPErr (*SendUXPMessage) (SPPluginRef selfRef, const char* uxpPluginId, PIActionDescriptor descriptor);\n    SPAPI SPErr (*AddUXPMessageListener) (SPPluginRef selfRef, PIUXPMessageNotifier notifier);\n    SPAPI SPErr (*RemoveUXPMessageListener) (SPPluginRef selfRef);\n\n} PsUXPSuite1;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"csdk-to-uxp-messaging\"\n    }}>{`CSDK to UXP messaging`}</h2>\n    <p><inlineCode parentName=\"p\">{`PsUXPSuite1.SendUXPMessage`}</inlineCode>{` can be used to send messages to a UXP plugin given the plugin ID (from `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`) and an action descriptor containing the message. `}</p>\n    <h3 {...{\n      \"id\": \"includes-and-globals\"\n    }}>{`Includes and globals`}</h3>\n    <p>{`First, make sure to include the right files and declare the globals to store the important pointers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// Include these\n#include \"PIActions.h\" // For PIActionDescriptor\n#include \"PIUXPSuite.h\" // For messaging\n\n// Your globals\nSPBasicSuite * sSPBasic = NULL; // This is passed to your main function\nSPPluginRef gPlugInRef = NULL; // This is passed to your main function\nPsUXPSuite1* sUxpProcs = NULL; // You acquire this using sSPBasic\nPSActionDescriptorProcs* sDescriptorProcs = NULL; // You acquire this using sSPBasic\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"based-on-plugin-type\"\n    }}>{`Based on Plugin Type...`}</h3>\n    <h4 {...{\n      \"id\": \"automation-plugins-autopluginmain\"\n    }}>{`Automation Plugins: `}<inlineCode parentName=\"h4\">{`AutoPluginMain`}</inlineCode></h4>\n    <p>{`For Automation plugins, the entry method is called `}<inlineCode parentName=\"p\">{`AutoPluginMain`}</inlineCode>{` use the code below to extract the plugin reference and the basic suite.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`DLLExport SPAPI SPErr AutoPluginMain(const char* caller, const char* selector, void* message) {\n\n    SPMessageData* basicMessage = (SPMessageData*) message;\n    sSPBasic = basicMessage->basic;\n    gPlugInRef = basicMessage->self;\n    ...\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"filter-plugins-pluginmain\"\n    }}>{`Filter plugins: `}<inlineCode parentName=\"h4\">{`PluginMain`}</inlineCode></h4>\n    <p>{`Filter plugins use an entry method called `}<inlineCode parentName=\"p\">{`PluginMain`}</inlineCode>{`, in which you can grab the basic suite and the plugin reference directly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`DLLExport MACPASCAL void PluginMain(const int16 selector,\n                                    FilterRecordPtr filterRecord,\n                                    intptr_t * data,\n                                    int16 * result) {\n    sSPBasic = filterRecord->sSPBasic;\n    gPlugInRef = filterRecord->plugInRef; \n    ...\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"acquiring-the-suites\"\n    }}>{`Acquiring the suites`}</h3>\n    <p>{`Next up is acquiring the correct suites to create your messages with ActionDescriptors and sending them to the UXP plugin of your choice.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// in your main method\n    sSPBasic->AcquireSuite(kPSUXPSuite,\n                           kPSUXPSuiteVersion1,\n                           (const void**)&sUxpProcs);\n\n    sSPBasic->AcquireSuite(kPSActionDescriptorSuite,\n                           kPSActionDescriptorSuiteVersion,\n                           (const void**)&sDescriptorProcs);\n\n    PIActionDescriptor desc;\n    sDescriptorProcs->Make(&desc);\n    sDescriptorProcs->PutString(desc, 'helo', \"Hello World!\");\n    sDescriptorProcs->PutFloat(desc, 'fltp', 0.952);\n\n    const char* UXP_MANIFEST_ID = \"com.your.pluginId\";\n    sUxpProcs->SendUXPMessage(gPlugInRef, UXP_MANIFEST_ID, desc);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"on-your-uxp-plugin\"\n    }}>{`On your UXP plugin`}</h3>\n    <p>{`Add a messaging listener using the `}<inlineCode parentName=\"p\">{`messaging`}</inlineCode>{` API group. Any descriptors sent from a CSDK plugin to the ID of this plugin will arrive on this callback.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let callback = (o) => { \n    console.log(\"Message from \" + o.pluginId + \":\" + o.message); \n}\n\nrequire('photoshop').messaging.addSDKMessagingListener(callback);\n\n...\n// You can remove your listener using this API\nrequire('photoshop').messaging.removeSDKMessagingListener(callback);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"uxp-to-csdk-messaging\"\n    }}>{`UXP to CSDK messaging`}</h2>\n    <p>{`For communication from a UXP plugin to a C plugin, define a listener within your CPlugin, and utilize both `}<inlineCode parentName=\"p\">{`AddUXPMessageListener`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`RemoveUXPMessageListener`}</inlineCode>{` at the appropriate time.`}</p>\n    <h3 {...{\n      \"id\": \"listener-callback\"\n    }}>{`Listener Callback`}</h3>\n    <p>{`All messages sent to this plugin will be handled in this method`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`void UXPMessageHandler(PIActionDescriptor descriptor) {\n    // do something\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"adding-listener\"\n    }}>{`Adding listener`}</h3>\n    <p>{`Use the code below where you'd like to start listening to messages.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`sUxpProcs->AddUXPMessageListener(gPlugInRef, UXPMessageHandler);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"removing-listener\"\n    }}>{`Removing listener`}</h3>\n    <p>{`Use the code below to stop listening to messages from UXP plugins.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`sUxpProcs->RemoveUXPMessageListener(gPlugInRef);\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`NOTE`}</em>{`: Only one notifier per plugin may be registered.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"sending-the-message-from-uxp\"\n    }}>{`Sending the message from UXP`}</h3>\n    <p>{`To send messages to the C Plugin, take note of the Component Id as defined in its resouce `}<inlineCode parentName=\"p\">{`PiPL`}</inlineCode>{`. This is the second parameter of the `}<inlineCode parentName=\"p\">{`PIComponentProperty`}</inlineCode>{`.`}</p>\n    <p>{`With this Id, use the messaging group of the photoshop package to send your message across.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let messageContent = {\n    status: \"ok\",\n    filter: 416\n};\nwindow.require('photoshop').messaging.sendSDKPluginMessage(<YourPluginComponentId>, messageContent);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}