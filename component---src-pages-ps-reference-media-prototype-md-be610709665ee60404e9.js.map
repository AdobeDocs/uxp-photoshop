{"version":3,"sources":["webpack://uxp-photoshop-documentation/./src/pages/ps_reference/media/prototype.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4SAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,aADR,cAGA,iJAAkI,cAAGC,WAAW,IAC5I,KAAQ,eADsH,eAAlI,OAGA,qLACA,0KACA,oCAAqB,cAAGA,WAAW,IAC/B,KAAQ,uFADS,cAArB,mOAGA,qKACA,mFACA,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,2BADQ,mBAGpB,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,0BADQ,kBAGpB,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,uBADQ,eAGpB,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,2BADQ,mBAGpB,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,wBADQ,iBAItB,2EAA4D,cAAGA,WAAW,IACtE,KAAQ,0BADgD,YAA5D,+GAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,8NASL,6HACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,6GAQTJ,EAAWK,gBAAiB","file":"component---src-pages-ps-reference-media-prototype-md-be610709665ee60404e9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"prototype\"\n    }}>{`Prototype`}</h1>\n    <p>{`We build the DOM APIs with a lot of intent and care to work around expectations Photoshop may have when a command is being `}<a parentName=\"p\" {...{\n        \"href\": \"./batchplay\"\n      }}>{`batchPlayed`}</a>{`. `}</p>\n    <p>{`Photoshop is full of functionality and while we strive to bring all of them into the user-friendly DOM, some may not be ready as you're writing your plug-ins.`}</p>\n    <p>{`Further, you may have a different or unique way of scripting Photoshop and may want to add more properties and methods to the provided DOM classes.`}</p>\n    <p>{`This is where `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\"\n      }}>{`prototypes`}</a>{` come in to play. In JavaScript, prototypes define what methods and properties are inherited by an object. Properties can be attached to a prototype to ensure that every instance of that object will have those properties. `}</p>\n    <p>{`You can overload the many classes' prototype at the start or launch of your plugin or via a library you wrote that is loaded before your code.`}</p>\n    <p>{`As a plug-in developer, you have access to these prototypes:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../classes/photoshop\"\n        }}>{`app.Photoshop`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../classes/document\"\n        }}>{`app.Document`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../classes/layer\"\n        }}>{`app.Layer`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../classes/actionset\"\n        }}>{`app.ActionSet`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../classes/action\"\n        }}>{`app.Action`}</a></li>\n    </ul>\n    <p>{`For example, suppose you want to add a new method to `}<a parentName=\"p\" {...{\n        \"href\": \"../../classes/document\"\n      }}>{`Document`}</a>{` which renames all layers, prepending '_' to them. You can run the following at the start of your plug-in.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require('photoshop').app.Document.prototype.prependLodash = function () {\n  // \\`this\\` will be the instance of Document you're calling the method on\n  this.layers.forEach(l => {\n    l.name = '_' + l.name\n  })\n}\n`}</code></pre>\n    <p>{`Then, when you want to perform this on any document, you can call it on the instance of that document:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require('photoshop').app.activeDocument.prependLodash() // All layers in the document will be renamed\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}