{"version":3,"sources":["webpack://uxp-photoshop-documentation/./node_modules/@adobe/gatsby-theme-aio/src/components/GlobalHeader/index.js"],"names":["GlobalHeader","menu","versions","pages","docs","location","toggleSideNav","hasSideNav","nav","useRef","selectedTabIndicator","useState","isAnimated","setIsAnimated","tabs","versionPopover","versionPopoverId","nextId","openVersionMenu","setOpenVersionMenu","hasMenu","getSelectedTabIndex","pathWithRootFix","rootFix","pathname","pagesWithRootFix","rootFixPages","selectedTabIndex","indexOf","findSelectedTopPage","positionSelectedTabIndicator","selectedTab","filter","tab","current","positionIndicator","useEffect","animateIndicator","onClick","event","length","contains","target","document","addEventListener","removeEventListener","role","css","aria-label","LARGE_SCREEN_WIDTH","isQuiet","TripleGripper","href","Adobe","className","elementType","getExternalLinkProps","ref","onFontsReady","map","page","i","title","path","createRef","push","Fragment","key","GatsbyLink","to","selected","isOpen","ariaControls","stopPropagation","nativeEvent","stopImmediatePropagation","id","variant","version","isFirst","isSelected","isHighlighted","A"],"mappings":"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","file":"bca8bde3-712cd85f49e6c295d669.js","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { Fragment, useRef, useEffect, useState, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport { Link as GatsbyLink } from 'gatsby';\nimport { findSelectedTopPage, rootFix, rootFixPages, getExternalLinkProps, LARGE_SCREEN_WIDTH } from '../../utils';\nimport { css } from '@emotion/react';\nimport { AnchorButton } from '../AnchorButton';\nimport { Adobe, TripleGripper } from '../Icons';\nimport { ActionButton, Text } from '../ActionButton';\nimport { PickerButton } from '../Picker';\nimport { Menu, Item as MenuItem } from '../Menu';\nimport { Popover } from '../Popover';\nimport { Tabs, Item as TabsItem, TabsIndicator, positionIndicator, animateIndicator } from '../Tabs';\nimport '@spectrum-css/typography';\nimport '@spectrum-css/assetlist';\n\nconst GlobalHeader = ({ menu, versions, pages, docs, location, toggleSideNav, hasSideNav }) => {\n  const nav = useRef(null);\n  const selectedTabIndicator = useRef(null);\n  // Don't animate the tab indicator by default\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [tabs] = useState([]);\n  const versionPopover = useRef(null);\n  const versionPopoverId = nextId();\n  const [openVersionMenu, setOpenVersionMenu] = useState(false);\n  const hasMenu = menu || menu === null;\n\n  const getSelectedTabIndex = () => {\n    const pathWithRootFix = rootFix(location.pathname);\n    const pagesWithRootFix = rootFixPages(pages);\n\n    let selectedTabIndex = pagesWithRootFix.indexOf(findSelectedTopPage(pathWithRootFix, pagesWithRootFix));\n\n    // Assume first tab is selected\n    if (selectedTabIndex === -1) {\n      selectedTabIndex = 0;\n    }\n\n    return selectedTabIndex;\n  };\n\n  const positionSelectedTabIndicator = () => {\n    const selectedTabIndex = getSelectedTabIndex();\n    const selectedTab = tabs.filter((tab) => tab.current)[selectedTabIndex];\n\n    positionIndicator(selectedTabIndicator, selectedTab);\n  };\n\n  useEffect(() => {\n    animateIndicator(selectedTabIndicator, isAnimated);\n    positionSelectedTabIndicator();\n  }, [location.pathname]);\n\n  useEffect(() => {\n    // Clicking outside of menu should close menu\n    const onClick = (event) => {\n      if (versions?.length && !versionPopover.current.contains(event.target)) {\n        setOpenVersionMenu(false);\n      }\n    };\n\n    document.addEventListener('click', onClick);\n\n    return () => document.removeEventListener('click', onClick);\n  }, []);\n\n  return (\n    <header\n      role=\"banner\"\n      css={css`\n        height: 100%;\n        border-bottom: var(--spectrum-global-dimension-size-10) solid var(--spectrum-global-color-gray-200);\n        box-sizing: border-box;\n      `}>\n      <nav\n        css={css`\n          height: 100%;\n        `}\n        role=\"navigation\"\n        aria-label=\"Global\">\n        <div\n          css={css`\n            display: grid;\n            grid-template-areas: 'title navigation optional';\n            grid-template-columns: minmax(auto, min-content) auto minmax(auto, min-content);\n            align-items: center;\n            margin-left: var(--spectrum-global-dimension-size-400);\n            margin-right: var(--spectrum-global-dimension-size-400);\n            height: 100%;\n\n            @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n              grid-template-columns: minmax(auto, min-content) auto 0 0;\n              margin-right: 0;\n              margin-left: 0;\n              height: calc(100% + var(--spectrum-global-dimension-size-10));\n              overflow: hidden;\n            }\n          `}>\n          <div\n            css={css`\n              height: 100%;\n              grid-area: title;\n            `}>\n            <div\n              css={css`\n                display: flex;\n                height: 100%;\n                align-items: center;\n              `}>\n              <div\n                css={css`\n                  display: flex;\n                  align-items: center;\n                `}>\n                <div\n                  css={css`\n                    margin-right: var(--spectrum-global-dimension-size-50);\n                    display: none;\n\n                    @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                      display: block;\n                      visibility: ${hasSideNav ? 'visible' : 'hidden'};\n                    }\n                  `}>\n                  <ActionButton\n                    isQuiet\n                    onClick={() => {\n                      toggleSideNav && toggleSideNav();\n                    }}>\n                    <TripleGripper />\n                  </ActionButton>\n                </div>\n                <a\n                  href=\"/\"\n                  css={css`\n                    text-decoration: none;\n                  `}>\n                  <div\n                    css={css`\n                      display: flex;\n                      align-items: center;\n\n                      @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                        svg {\n                          margin-right: var(--spectrum-global-dimension-size-100);\n                        }\n\n                        strong {\n                          display: none;\n                        }\n                      }\n                    `}>\n                    <Adobe\n                      css={css`\n                        width: var(--spectrum-global-dimension-size-300);\n                        height: var(--spectrum-global-dimension-size-250);\n                        display: block;\n                        margin-right: var(--spectrum-global-dimension-size-100);\n                      `}\n                    />\n                    <strong className=\"spectrum-Heading spectrum-Heading--sizeXXS\">Developer</strong>\n                  </div>\n                </a>\n              </div>\n\n              {hasMenu && (\n                <div\n                  css={css`\n                    margin-left: var(--spectrum-global-dimension-size-300);\n                    box-sizing: border-box;\n                    padding: var(--spectrum-global-dimension-size-200) var(--spectrum-global-dimension-size-300) 0\n                      var(--spectrum-global-dimension-size-300);\n                    height: calc(100% + var(--spectrum-global-dimension-size-10));\n                    border-left: 1px solid var(--spectrum-global-color-gray-200);\n                    border-right: 1px solid var(--spectrum-global-color-gray-200);\n\n                    @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                      display: none;\n                    }\n                  `}>\n                  <ActionButton elementType=\"a\" isQuiet href=\"/apis\" {...getExternalLinkProps()}>\n                    <Text>Discover</Text>\n                  </ActionButton>\n                </div>\n              )}\n            </div>\n          </div>\n          <div\n            css={css`\n              grid-area: navigation;\n              margin-left: ${hasMenu\n                ? 'var(--spectrum-global-dimension-size-200)'\n                : 'var(--spectrum-global-dimension-size-300)'};\n\n              @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                overflow-x: auto;\n                overflow-x: overlay;\n                overflow-y: hidden;\n\n                .spectrum-Tabs {\n                  padding-bottom: var(--spectrum-global-dimension-size-400);\n                  margin-top: var(--spectrum-global-dimension-size-400);\n\n                  ${versions?.length > 0 &&\n                  `\n                    & > .spectrum-Tabs-item:first-of-type {\n                      margin-right: var(--spectrum-global-dimension-size-300);\n                    }\n                  `}\n                }\n\n                .spectrum-Tabs-selectionIndicator {\n                  bottom: calc(\n                    var(--spectrum-global-dimension-size-400) - var(--spectrum-global-dimension-size-125)\n                  ) !important;\n                }\n              }\n            `}>\n            <Tabs\n              ref={nav}\n              onFontsReady={() => {\n                positionSelectedTabIndicator();\n                setIsAnimated(true);\n              }}>\n              {hasMenu && (\n                <div\n                  css={css`\n                    display: none;\n                    margin-right: var(--spectrum-global-dimension-size-300);\n\n                    @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                      display: block;\n                    }\n                  `}>\n                  <TabsItem elementType=\"a\" href=\"/apis\">\n                    Discover\n                  </TabsItem>\n                </div>\n              )}\n              {pages.map((page, i) => {\n                const { title, path } = page;\n                const ref = createRef();\n                tabs.push(ref);\n\n                return (\n                  <Fragment key={i}>\n                    <TabsItem elementType={GatsbyLink} ref={ref} to={path} selected={getSelectedTabIndex() === i}>\n                      {title}\n                    </TabsItem>\n                    {i === 0 && versions?.length > 0 && (\n                      <div\n                        css={css`\n                          margin-left: var(--spectrum-global-dimension-size-100) !important;\n                          margin-right: var(--spectrum-global-dimension-size-300);\n\n                          @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                            display: none;\n                          }\n                        `}>\n                        <PickerButton\n                          isQuiet\n                          isOpen={openVersionMenu}\n                          ariaControls={versionPopoverId}\n                          onClick={(event) => {\n                            event.stopPropagation();\n                            event.nativeEvent.stopImmediatePropagation();\n\n                            setOpenVersionMenu((openVersionMenu) => !openVersionMenu);\n                          }}>\n                          {versions[0].title}\n                        </PickerButton>\n                        <Popover\n                          ref={versionPopover}\n                          id={versionPopoverId}\n                          variant=\"picker\"\n                          isQuiet\n                          isOpen={openVersionMenu}>\n                          <Menu>\n                            {versions.map((version, i) => {\n                              const isFirst = i === 0;\n\n                              return (\n                                <MenuItem key={i} isSelected={isFirst} isHighlighted={isFirst} href={version.path}>\n                                  {version.title}\n                                </MenuItem>\n                              );\n                            })}\n                          </Menu>\n                        </Popover>\n                      </div>\n                    )}\n                  </Fragment>\n                );\n              })}\n              <TabsIndicator\n                ref={selectedTabIndicator}\n                css={css`\n                  bottom: calc(-1 * var(--spectrum-global-dimension-size-125)) !important;\n                `}\n              />\n              {docs && (\n                <div\n                  css={css`\n                    margin-left: var(--spectrum-global-dimension-size-400);\n                    white-space: nowrap;\n                  `}>\n                  <AnchorButton variant=\"primary\" href={docs.path}>\n                    {docs.title ?? 'View Docs'}\n                  </AnchorButton>\n                </div>\n              )}\n            </Tabs>\n          </div>\n          <div\n            css={css`\n              grid-area: optional;\n              justify-self: flex-end;\n\n              @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                display: none;\n              }\n            `}>\n            <div\n              css={css`\n                display: flex;\n              `}>\n              <AnchorButton variant=\"primary\" href=\"https://console.adobe.io\">\n                Console\n              </AnchorButton>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </header>\n  );\n};\n\nGlobalHeader.propTypes = {\n  menu: PropTypes.bool,\n  pages: PropTypes.array,\n  docs: PropTypes.object,\n  location: PropTypes.object,\n  toggleSideNav: PropTypes.func,\n  hasSideNav: PropTypes.bool\n};\n\nexport { GlobalHeader };\n"],"sourceRoot":""}