{"version":3,"sources":["webpack:///./src/pages/guides/uxp_guide/localization-and-platforms.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,IACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,8BADR,8BAGA,mBAAQ,CACN,GAAM,gBADR,gBAGA,mIACA,yBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,oEAKL,6DAA0C,4BAAYA,WAAW,KAAvB,UAA1C,yGACA,oHAAiG,4BAAYA,WAAW,KAAvB,aAAjG,4DACA,mBAAQ,CACN,GAAM,mCADR,mCAGA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4GAKL,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gGAKL,mBAAQ,CACN,GAAM,qBADR,qBAGA,6MACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6HASTJ,EAAWK,gBAAiB","file":"component---src-pages-guides-uxp-guide-localization-and-platforms-md-015159425fe3102c76cd.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-parliament/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"localization-and-platforms\"\n    }}>{`Localization and Platforms`}</h1>\n    <h2 {...{\n      \"id\": \"localization\"\n    }}>{`Localization`}</h2>\n    <p>{`If your plugin requires code-based localization, you can use this method to identify the current locale:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`require(\"uxp\").host.uiLocale\n// returns string like \"en_US\" \n`}</code></pre>\n    <p>{`You can use the returned string in `}<inlineCode parentName=\"p\">{`switch`}</inlineCode>{` statements (or other control flow techniques) to output the correct strings in messages and dialogs.`}</p>\n    <p>{`You can also use it to change properties of HTML components in your panels (typically the `}<inlineCode parentName=\"p\">{`innerHTML`}</inlineCode>{` property) so they contain the correct language strings.`}</p>\n    <h2 {...{\n      \"id\": \"host-application-identification\"\n    }}>{`Host Application Identification`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const foo = require(\"uxp\").host.version\n// 'foo' contains a string: \"22.0.0\" (or whatever version)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const bar = require(\"uxp\").host.name\n// 'bar contains a string like \"Photoshop\" or \"XD\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"os-identification\"\n    }}>{`OS Identification`}</h2>\n    <p>{`Sometimes you need to write different code depending upon whether your plugin is hosted on macOS or Windows. You can find out what app your plugin is hosted in with this methods:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const bar = require(\"os\").platform;\n// 'bar contains the string \"darwin\" for macOS and \"windows\" for, well, Windows\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}