{"version":3,"sources":["webpack:///./src/pages/guides/ps_basics/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0PAMaA,G,UAAe,IACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,yBADR,yBAGA,mBAAQ,CACN,GAAM,cADR,cAGA,gHAA6F,+BAAGC,WAAW,KAAQ,CAC/G,KAAQ,2BADiF,4BAA7F,6CAEmF,+BAAGA,WAAW,KAAQ,CACrG,KAAQ,iCADuE,uBAFnF,KAKA,uUACA,iUACA,yPAAsO,+BAAGA,WAAW,KAAQ,CACxP,KAAQ,qBAD0N,aAAtO,KAGA,yEAAsD,+BAAGA,WAAW,KAAQ,CACxE,KAAQ,gCAD0C,iBAAtD,uBAEkD,+BAAGA,WAAW,KAAQ,CACpE,KAAQ,2BADsC,sBAFlD,8LAKA,yFAAsE,+BAAGA,WAAW,KAAQ,CACxF,KAAQ,iCAD0D,2BAAtE,KAGA,mBAAQ,CACN,GAAM,uCADR,uCAGA,oRAAiQ,oBAAIA,WAAW,KAAf,gBAAjQ,yBACA,gOACA,mBAAQ,CACN,GAAM,qBADR,qBAGA,sLACA,gEAA6C,4BAAYA,WAAW,KAAvB,OAA7C,oFACA,mBAAQ,CACN,GAAM,yBADR,yBAGA,kOACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4CAIL,sCAAmB,4BAAYA,WAAW,KAAvB,OAAnB,kJACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6EAKL,oFACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iFAKL,uEACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+WAUL,2CAAwB,4BAAYA,WAAW,KAAvB,kBAAxB,+CAAkI,4BAAYA,WAAW,KAAvB,SAAlI,SAA6L,4BAAYA,WAAW,KAAvB,QAA7L,iCACA,uCAAoB,4BAAYA,WAAW,KAAvB,OAApB,gRACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oKAML,mFAAgE,4BAAYA,WAAW,KAAvB,OAAhE,4FACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4GAKL,mBAAQ,CACN,GAAM,YADR,YAGA,kOACA,qFACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wRASL,2FACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qJAML,+IACA,0DACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+IAML,yDAAsC,4BAAYA,WAAW,KAAvB,YAAtC,qGACA,mBAAQ,CACN,GAAM,SADR,SAGA,0LACA,gJACA,uDAAoC,4BAAYA,WAAW,KAAvB,SAApC,mBAAyG,+BAAGA,WAAW,KAAQ,CAC3H,KAAQ,iCAD6F,iBAAzG,6DAGA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8UAYL,mBAAQ,CACN,GAAM,0BADR,0BAGA,qEAAkD,4BAAYA,WAAW,KAAvB,WAAlD,yJAA+P,4BAAYA,WAAW,KAAvB,eAA/P,iEACA,oIAAiH,oBAAIA,WAAW,KAAf,UAAjH,yBACA,+JAA4I,oBAAIA,WAAW,KAAf,UAA5I,mBACA,qHACA,kIACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0bAYL,sFAAmE,+BAAGA,WAAW,KAAQ,CACrF,KAAQ,iCADuD,iBAAnE,KAGA,mBAAQ,CACN,GAAM,aADR,aAGA,oJAAiI,+BAAGA,WAAW,KAAQ,CACnJ,KAAQ,oBADqH,aAAjI,qOAOJJ,EAAWK,gBAAiB","file":"component---src-pages-guides-ps-basics-index-md-449465578c63ee70a563.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-parliament/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"photoshop-uxp-plugins\"\n    }}>{`Photoshop UXP Plugins`}</h1>\n    <h2 {...{\n      \"id\": \"the-basics\"\n    }}>{`The Basics`}</h2>\n    <p>{`This section covers the basics of UXP in Photoshop. For the basics of UXP itself, see `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-photoshop/guides/\"\n      }}>{`Getting Started with UXP`}</a>{`. For the full API for Photoshop, see the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-photoshop/ps_reference/\"\n      }}>{`Photoshop API pages`}</a>{`.`}</p>\n    <p>{`While generic UXP APIs work across applications that support UXP (such as Adobe XD as well as Photoshop), the APIs in this section are specific to Photoshop. As such, they affect Photoshop documents rather than changing your plugin's UI, accessing the file system, and other non-Photoshop operations.`}</p>\n    <p>{`UXP exposes APIs for Photoshop at the same level in your plugin as your UI code. Unlike CEP plugins, UXP plugins do not have to serialize strings and send them back and forth between the UI code and the ExtendScript engine. This removes a substantial barrier to rapid development and debugging.`}</p>\n    <p>{`As of this writing, UXP in Photoshop is a work in progress, with some Photoshop functionality not yet exposed in the API. The workaround if you need some Photoshop function that is not in the API is to use a feature called `}<a parentName=\"p\" {...{\n        \"href\": \"batchplay_intro/\"\n      }}>{`batchPlay`}</a>{`.`}</p>\n    <p>{`To start writing your plugin, first review the `}<a parentName=\"p\" {...{\n        \"href\": \"../uxp_guide/uxp-toolchain/\"\n      }}>{`UXP Toolchain`}</a>{`. Then download the `}<a parentName=\"p\" {...{\n        \"href\": \"../uxp-developer-tool/\"\n      }}>{`UXP Developer Tool`}</a>{`. You can use that tool to create a plugin folder containing basic scaffolding for HTML, JavaScript, and other required files. Edit these files, replacing the sample code with your code.`}</p>\n    <p>{`More detailed information about these APIs can be found in the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-photoshop/ps_reference/\"\n      }}>{`Photoshop API reference`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"synchronous-vs-asynchronous-methods\"\n    }}>{`Synchronous vs Asynchronous Methods`}</h2>\n    <p>{`An important difference between ExtendScript (and CEP) and UXP in Photoshop is that all ExtendScript calls to Photoshop were synchronous. This means they blocked the Photoshop UI while they were executing. In UXP, a method call can be synchronous or `}<em parentName=\"p\">{`asynchronous`}</em>{`, i.e., non-blocking.`}</p>\n    <p>{`Asynchronous operations are typically used for methods that can take a long time (e.g., creating a document). Simpler operations, such as getting properties of an object, are typically synchronous.`}</p>\n    <h2 {...{\n      \"id\": \"photoshop-objects\"\n    }}>{`Photoshop Objects`}</h2>\n    <p>{`Every interaction with Photoshop is done via one of the objects below. Methods on the object allow you to get and set properties and access child objects. `}</p>\n    <p>{`Most objects are accessed through the `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` object, which exposes the Photoshop DOM. The objects currently implemented are:`}</p>\n    <h3 {...{\n      \"id\": \"photoshop-application\"\n    }}>{`Photoshop Application`}</h3>\n    <p>{`This is the top-level object, the root of the Photoshop DOM. From here, you can access open documents, tools, and UI elements as well as run commands or menu items. To get access to this object, use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const app = require('photoshop').app;\n`}</code></pre>\n    <p>{`Through the `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` object you've just created, you can access Photoshop's objects and methods. For example, the currently-active document is obtained like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const app = require('photoshop').app;\nconst doc = app.activeDocument;\n`}</code></pre>\n    <p>{`And you can get an array of all open documents like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const app = require('photoshop').app;\nconst allDocuments = app.documents;\n`}</code></pre>\n    <p>{`Creating a document is also straightforward:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const app = require('photoshop').app;\nlet myDoc = await app.createDocument(); // creates a document with default settings\n\n// You can also add some document properties while you're creating a document:\nlet myDoc = await app.createDocument({width: 1200, height: 800,\n  resolution: 300, mode: 'CMYKColorMode', \n  name: 'hello world', fill: 'transparent'});\n`}</code></pre>\n    <p>{`Note that, since `}<inlineCode parentName=\"p\">{`createDocument`}</inlineCode>{` is an expensive operation, you need to use `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{` (or .`}<inlineCode parentName=\"p\">{`then`}</inlineCode>{`) to wait for its completion.`}</p>\n    <p>{`Finally, the `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` object also exposes a method for opening a document. UXP does not allow arbitrary access to the local filesystem; for any file outside of your plugin's home folder, data folder, or temp folder, you must ask the user for access by presenting a (built into UXP) dialog.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const app = require('photoshop').app;\nlet entry = await require('uxp').storage.localFileSystem.getFileForOpening();\nconst document = await app.open(entry);\n`}</code></pre>\n    <p>{`See the reference for more methods and properties of the `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` object. But here's one final very useful method: to show a simple alert, use this code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const app = require('photoshop').app;\nawait app.showAlert('There's no business like show business');\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"document\"\n    }}>{`Document`}</h3>\n    <p>{`A single, open, Photoshop document. From this object, you can access the document's layers, its dimensions, resolution, etc. You can crop it, add/delete/duplicate layers, resize, rotate, and save it.`}</p>\n    <p>{`For example, to get the dimensions of the active document:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const app = require('photoshop').app;\nconst myDoc = app.activeDocument;\nconst docHeight = myDoc.height;\nconst docWidth = myDoc.width;\nconst docResolution = myDoc.resolution;\nawait app.showAlert(\\`Doc size is \\${docWidth} x \\${docHeight}. Resolution is \\${docResolution}\\`);\n`}</code></pre>\n    <p>{`To get an array of all layers in a document, use code like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const app = require('photoshop').app;\nconst myDoc = app.activeDocument;\nconst docLayers = myDoc.layers; // returns an array of layer objects\n`}</code></pre>\n    <p>{`A layer in that list includes a number of properties, including layer name, parent, whether it's locked or not, etc.`}</p>\n    <p>{`And to create a layer, do this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const app = require('photoshop').app;\nconst myDoc = app.activeDocument;\nconst myLayer = await myDoc.createLayer({name:'hello layer'});\n`}</code></pre>\n    <p>{`Other methods available in the `}<inlineCode parentName=\"p\">{`document`}</inlineCode>{` object include merging and grouping layers, flattening, saving, closing, resizing, and rotating.`}</p>\n    <h3 {...{\n      \"id\": \"layer\"\n    }}>{`Layer`}</h3>\n    <p>{`With this class, you can delete and duplicate layers, move them around, link them, rotate them, scale/skew them, and get their parent (but not their children).`}</p>\n    <p>{`There is only one Layer class as of this writing. Ultimately, there will be subclasses for the different layer types.`}</p>\n    <p>{`For a full discussion of the `}<inlineCode parentName=\"p\">{`layer`}</inlineCode>{` class, see the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-photoshop/ps_reference/\"\n      }}>{`API Reference`}</a>{`. Here's an example of how to scale a layer named \"foo\":`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{` const app = require('photoshop').app;\n  const myDoc = app.activeDocument;\n  const docLayers = myDoc.layers;\n  // there's no \"getLayerByName\" method, so we loop until we find the layer:\n  for (let i=0; i< docLayers.length; i++) {\n    if (docLayers[i].name == 'foo') {\n      await docLayers[i].scale(50, 50);\n    }\n  }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"actions-and-actionsets\"\n    }}>{`Actions and ActionSets`}</h3>\n    <p>{`Many Photoshop users make heavy use of the `}<inlineCode parentName=\"p\">{`Actions`}</inlineCode>{` panel. Actions are basically macros that you can record and play back to script commands and tools that you use frequently. Actions are grouped into `}<inlineCode parentName=\"p\">{`Action Sets`}</inlineCode>{`, similarly to the way layers can be grouped into Layer Sets.`}</p>\n    <p>{` The Actions object allows you to delete, duplicate, rename, and play actions. There is no current way to `}<em parentName=\"p\">{`create`}</em>{` an action using UXP.`}</p>\n    <p>{`Similarly to Actions, the ActionSet object allows you to delete, duplicate, rename, and play Action Sets. There is no current way to `}<em parentName=\"p\">{`create`}</em>{` an Action Set.`}</p>\n    <p>{`Note that Actions and Action Sets exist app-wide; they're not tied to a specific Document.`}</p>\n    <p>{`Here's an example that finds a particular Action in the default Action Set, then plays it if it exists:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  const app = require('photoshop').app;\n  const allActionSets = app.actionTree;\n  const firstActionSet = allActionSets[0];\n  let actions = new Map(); // a JS Map allows easy \"find by name\" operations\n  firstActionSet.actions.forEach((action) => { actions.set(action.name, action)});\n  const myAction = actions.get(\"Wood Frame - 50 pixel\");\n  if (myAction) { // user may have deleted this action\n    await myAction.play();\n  }\n`}</code></pre>\n    <p>{`Again, for more information about these operations, see the `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-photoshop/ps_reference/\"\n      }}>{`API Reference`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"batchplay\"\n    }}>{`batchPlay`}</h2>\n    <p>{`Not all objects and actions are exposed in the current Photoshop UXP API. For those that aren't, the workaround is to use `}<a parentName=\"p\" {...{\n        \"href\": \"batchplay_intro\"\n      }}>{`batchPlay`}</a>{`. With batchPlay, you construct a JSON structure telling Photoshop which actions to perform. Unlike the ExtendScript method ExecuteAction, batchPlay allows you to chain multiple actions together and execute them in sequence.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}