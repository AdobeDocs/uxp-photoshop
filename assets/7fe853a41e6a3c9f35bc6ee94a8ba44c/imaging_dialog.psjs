
async function augment(mode) {
    try {
        const imaging = require('photoshop').imaging;
        const app = require('photoshop').app;
        const core = require('photoshop').core;

        if (app.activeDocument === null) {
            throw new Error("You must have an document open for this script.");
        }
        if (app.activeDocument.activeLayers.length === 0) {
            throw new Error("You must have a layer selected for this script.");
        }

        await core.executeAsModal(
            async () => {
                function noise() {return Math.floor(Math.random()*256)}
                function invert(val) {return 255 - val}

                let components = 3; // RGB
                const doc = app.activeDocument;
                const docWidth = doc.width;
                const docHeight = doc.height;
                const center = {x: Math.round(docWidth/2), y: Math.round(docHeight/2)};
                const width = 20;
                const height = 30;
                
                let arr;
                let hasAlpha = false;
                if (mode === 'invert') {
                // get 
                    const imgData = await imaging.getPixels({
                        sourceBounds: {
                            left: center.x - (width/2),
                            top: center.y - (height/2),
                            right: center.x + (width/2),
                            bottom: center.y + (height/2)
                        },
                        targetSize: {height: height, width: width}
                    });
                    arr = await imgData.imageData.getData(); 
                    components = imgData.imageData.components;
                    hasAlpha = imgData.imageData.hasAlpha;
                } else {
                    arr = new Uint8Array(components * width * height);
                }

                // Process by component chunks
                for (let i=0; i<components * width * height; i = i + components) {
                    switch (mode) {
                        case 'red':
                            // full on the red channel
                            arr[i] = 255; 
                            // leave G & B channels at 0
                            break;

                        case 'invert':
                            const affectChannels = hasAlpha ? components - 1 : components;
                            for (let k=0; k<affectChannels; k++) { // RGBA, skip A
                                arr[i+k] = invert(arr[i+k]);
                            }
                            break;

                        case 'noise':
                            for (let k=0; k<components; k++) {
                                arr[i+k] = noise();
                            }
                            break;
                    }
                }
                const imageData = await imaging.createImageDataFromBuffer(
                    arr,
                    {
                        width: width,
                        height: height,
                        components: components,
                        colorProfile: "sRGB IEC61966-2.1",
                        colorSpace: "RGB"
                    }
                );
                await imaging.putPixels({
                    layerID: doc.activeLayers[0].id,
                    imageData: imageData,
                    targetBounds: {top: center.y - (height/2), left: center.x - (width/2)},
                    replace: false
                });

                // Release image data immediately
                imageData.dispose();
            }
        )
            .then(console.log)
            .catch(console.error);
    } catch (e) {
        core.showAlert(e.message);
    }
}

async function createDialog() {
    const dialog = document.createElement("dialog");
    dialog.innerHTML = `
        <sp-body>
            <sp-label>Choose pixel treament:</sp-label>
            <sp-action-button id="invert">Invert</sp-action-button>
            <sp-action-button id="noise">Noise</sp-action-button>
            <sp-action-button id="red">Red</sp-action-button>
        </sp-body>
    `;
    const choice = 
    document.body.appendChild(dialog);

    const modes = ['invert', 'noise', 'red'];
    for (let mode of modes) {
        document.getElementById(mode)
            .addEventListener("click", async () => {
                await augment(mode);
                dialog.close(mode);
            });
    }
    const response = await dialog.showModal();
    return response;
}
await createDialog();
// core.showAlert('done');
