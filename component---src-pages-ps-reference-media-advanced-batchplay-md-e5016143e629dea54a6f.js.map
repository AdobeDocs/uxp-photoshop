{"version":3,"sources":["webpack:///./src/pages/ps_reference/media/advanced/batchplay.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,IACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sDAAmC,4BAAYC,WAAW,KAAvB,aAAnC,uGAAgM,4BAAYA,WAAW,KAAvB,aAAhM,wBAA8Q,4BAAYA,WAAW,KAAvB,iBAA9Q,6BAAqW,4BAAYA,WAAW,KAAvB,iBAArW,8CAA6c,4BAAYA,WAAW,KAAvB,aAA7c,6CACA,mBAAQ,CACN,GAAM,OADR,OAGA,8HACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iHAIL,yIACA,mBAAQ,CACN,GAAM,sBADR,sBAGA,wIAAqH,4BAAYA,WAAW,KAAvB,aAArH,mHAA8R,4BAAYA,WAAW,KAAvB,cAA9R,eACA,0FACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,srBAgBL,mBAAQ,CACN,GAAM,sBADR,sBAGA,2CAAwB,4BAAYA,WAAW,KAAvB,iBAAxB,2NAA6S,4BAAYA,WAAW,KAAvB,KAA7S,4CAAuY,4BAAYA,WAAW,KAAvB,UAAvY,uBACA,mBAAQ,CACN,GAAM,+BADR,+BAGA,iHACA,wBACE,oBAAIA,WAAW,MAAf,iDAAsE,4BAAYA,WAAW,MAAvB,yBAAtE,oBAA6J,4BAAYA,WAAW,MAAvB,yBAA7J,0HACA,oBAAIA,WAAW,MAAf,uFAA4G,4BAAYA,WAAW,MAAvB,qBAA5G,+CAEF,mBAAQ,CACN,GAAM,qBADR,qBAGA,4IACA,mBAAQ,CACN,GAAM,sCADR,yCAGA,6RACA,mBAAQ,CACN,GAAM,8BADR,mCAGA,wPACA,mBAAQ,CACN,GAAM,iCADR,oCAGA,sKACA,wBACE,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,QAApB,qEACA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,UAApB,uNAMNJ,EAAWK,gBAAiB","file":"component---src-pages-ps-reference-media-advanced-batchplay-md-e5016143e629dea54a6f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-parliament/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`At the heart of our APIs is `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{`, a method that can send multiple actions into Photoshop event queue, and return you their results. `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` is the evolution of `}<inlineCode parentName=\"p\">{`executeAction`}</inlineCode>{` from ExtendScript. Where `}<inlineCode parentName=\"p\">{`executeAction`}</inlineCode>{` could only play one descriptor at a time, `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` accepts an array of action descriptors. `}</p>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`BatchPlay can directly be accessed from the Photoshop action module, and by default is asynchronous`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require('photoshop').action.batchPlay(descriptors: ActionDescriptor[], options: Object): Promise<Object[]>\n`}</code></pre>\n    <p>{`Below we will dive into both how action descriptors are defined in JavaScript, and what options are available.`}</p>\n    <h3 {...{\n      \"id\": \"action-descriptors\"\n    }}>{`Action Descriptors`}</h3>\n    <p>{`In ExtendScript, we provided a class around constructing descriptors, references, and putting values in. With `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{`, we have added a way to construct ActionDescriptors directly from JS objects. This is sometimes referred to as `}<inlineCode parentName=\"p\">{`actionJSON`}</inlineCode>{`, as well. `}</p>\n    <p>{`Here's an example of a simple ActionDescriptor defined in JSON:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  _obj: \"colorSampler\", // _obj is a reserved identifier for the event of the action descriptor. \n                  // _obj is universally needed for all descriptors being passed into batchPlay.\n  _target: { // This is the ActionReference, the element on which this action should be played\n    _ref: \"document\", // In this case we are trying to play an event on the document element\n    _enum: \"ordinal\", // _enum and _value signify that this is the active element. In document's case, this is the active document\n    _value: \"targetEnum\"\n  },\n  samplePoint: { // All other fields are optional and are used by the action itself\n    horizontal: 100,\n    vertical: 100\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"string-identifiers\"\n    }}>{`String identifiers`}</h4>\n    <p>{`If you have used `}<inlineCode parentName=\"p\">{`executeAction`}</inlineCode>{` in ExtendScript, you are probably familiar with 4 character codes (OSTypes) and helper methods around them. In JavaScript, we support string identifiers. However, you can still use an OSType by prepending it with a `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` sign and passing that as a string, like `}<inlineCode parentName=\"p\">{`'$app `}</inlineCode>{` (mind the space!).`}</p>\n    <h4 {...{\n      \"id\": \"accepted-action-descriptors\"\n    }}>{`Accepted action descriptors`}</h4>\n    <p>{`There are a few ways to learn what Photoshop accepts as acceptable action descriptors.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`During development, you can use the Photoshop `}<inlineCode parentName=\"li\">{`Record Action json...`}</inlineCode>{` menu item under `}<inlineCode parentName=\"li\">{`Plugins > Development`}</inlineCode>{` to record the action you wish to capture. The output json can be used to construct and modify your action descriptor.`}</li>\n      <li parentName=\"ul\">{`A similar but more raw method of gaining insight would be to add a listener via the `}<inlineCode parentName=\"li\">{`app.eventNotifier`}</inlineCode>{` property, and then performing the action.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"batchplay-options\"\n    }}>{`BatchPlay options`}</h3>\n    <p>{`The second argument of batchPlay adjusts the options. Below is the list of options that are most commonly needed.`}</p>\n    <h4 {...{\n      \"id\": \"synchronousexecution-default-false\"\n    }}>{`synchronousExecution (default: false)`}</h4>\n    <p>{`If set to true, batchPlay will block the entire scripting thread until it resolves, then return the value(s). We use this in the DOM API for property getters and setters, as it allows for simpler code. For expensive operations, make sure you keep this false.`}</p>\n    <h4 {...{\n      \"id\": \"modalbehavior-default-fail\"\n    }}>{`modalBehavior (default: \"fail\")`}</h4>\n    <p>{`This can be \"wait\", \"execute\" or \"fail\", and describes what the batchPlay command should do if Photoshop is modal. Keep in mind that if you are showing a dialog via your own plug-in, that is also considered a modal state.`}</p>\n    <h4 {...{\n      \"id\": \"historystateinfo-default-none\"\n    }}>{`historyStateInfo (default: none)`}</h4>\n    <p>{`Request Photoshop to describe the entire batchPlayed series of actions as a single history state. History state should have two properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{`: A string to show the name of the history event in History panel`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`target`}</inlineCode>{`: A document reference for where to create the history state at. Keep in mind that if you point at a different document, or if your batchPlays aren't all acting on the same document, the behavior is undefined.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}