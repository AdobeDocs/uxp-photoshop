{"version":3,"sources":["webpack:///./node_modules/@adobe/gatsby-theme-aio/src/components/GlobalHeader/index.js"],"names":["stretched","GlobalHeader","globalNav","versions","pages","docs","location","toggleSideNav","hasSideNav","nav","useRef","selectedTabIndicator","useState","isAnimated","setIsAnimated","tabs","primaryPopover","secondaryPopover","versionPopover","versionPopoverId","nextId","openPrimaryMenu","setOpenPrimaryMenu","openSecondaryMenu","setOpenSecondaryMenu","openVersionMenu","setOpenVersionMenu","discoverMenu","menus","find","menu","path","getSelectedTabIndex","pathWithRootFix","rootFix","pathname","pagesWithRootFix","rootFixPages","selectedTabIndex","indexOf","findSelectedTopPage","positionSelectedTabIndicator","selectedTab","filter","tab","current","positionIndicator","useEffect","animateIndicator","onClick","event","length","contains","target","document","addEventListener","removeEventListener","role","css","LARGE_SCREEN_WIDTH","aria-label","id","areas","columns","alignItems","marginX","height","gridArea","isQuiet","href","home","logo","className","title","map","index","isPrimary","key","elementType","getExternalLinkProps","isOpen","ariaControls","stopPropagation","nativeEvent","stopImmediatePropagation","ref","variant","sections","section","i","marginEnd","position","heading","marginBottom","marginStart","page","k","description","direction","marginTop","divider","orientation","size","viewAll","onFontsReady","createRef","push","Fragment","GatsbyLink","to","selected","version","isFirst","isSelected","isHighlighted","justifySelf","console","signIn"],"mappings":"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","file":"bca8bde3-323b8a49051241f096b3.js","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { useRef, useEffect, useState, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport { Link as GatsbyLink } from 'gatsby';\nimport { findSelectedTopPage, rootFix, rootFixPages, getExternalLinkProps, LARGE_SCREEN_WIDTH } from '../../utils';\nimport { css } from '@emotion/core';\nimport { Grid, Flex } from '@adobe/react-spectrum';\nimport { View } from '@adobe/react-spectrum';\nimport { Divider } from '@adobe/react-spectrum';\nimport { AnchorButton } from '../AnchorButton';\nimport { Link } from '@adobe/react-spectrum';\nimport { ButtonGroup } from '@adobe/react-spectrum';\nimport { Adobe, TripleGripper } from '../Icons';\nimport { ActionButton, Text } from '../ActionButton';\nimport { PickerButton } from '../Picker';\nimport { Menu, Item as MenuItem } from '../Menu';\nimport { Popover } from '../Popover';\nimport { Tabs, Item as TabsItem, TabsIndicator, positionIndicator, animateIndicator } from '../Tabs';\nimport '@spectrum-css/typography';\nimport '@spectrum-css/assetlist';\n\nconst stretched = css`\n  height: 100%;\n`;\n\nconst GlobalHeader = ({ globalNav, versions, pages, docs, location, toggleSideNav, hasSideNav }) => {\n  const nav = useRef(null);\n  const selectedTabIndicator = useRef(null);\n  // Don't animate the tab indicator by default\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [tabs] = useState([]);\n  const primaryPopover = useRef(null);\n  const secondaryPopover = useRef(null);\n  const versionPopover = useRef(null);\n  const versionPopoverId = nextId();\n  const [openPrimaryMenu, setOpenPrimaryMenu] = useState(false);\n  const [openSecondaryMenu, setOpenSecondaryMenu] = useState(false);\n  const [openVersionMenu, setOpenVersionMenu] = useState(false);\n\n  const discoverMenu = globalNav.menus.find((menu) => menu.path);\n\n  const getSelectedTabIndex = () => {\n    const pathWithRootFix = rootFix(location.pathname);\n    const pagesWithRootFix = rootFixPages(pages);\n\n    let selectedTabIndex = pagesWithRootFix.indexOf(findSelectedTopPage(pathWithRootFix, pagesWithRootFix));\n\n    // Assume first tab is selected\n    if (selectedTabIndex === -1) {\n      selectedTabIndex = 0;\n    }\n\n    return selectedTabIndex;\n  };\n\n  const positionSelectedTabIndicator = () => {\n    const selectedTabIndex = getSelectedTabIndex();\n    const selectedTab = tabs.filter((tab) => tab.current)[selectedTabIndex];\n\n    positionIndicator(selectedTabIndicator, selectedTab);\n  };\n\n  useEffect(() => {\n    animateIndicator(selectedTabIndicator, isAnimated);\n    positionSelectedTabIndicator();\n  }, [location.pathname]);\n\n  useEffect(() => {\n    // Clicking outside of menu should close menu\n    const onClick = (event) => {\n      if (globalNav.menus.length && !globalNav.menus[0].path) {\n        if (!primaryPopover.current.contains(event.target)) {\n          setOpenPrimaryMenu(false);\n        }\n      }\n\n      if (globalNav.menus.length > 1) {\n        if (!secondaryPopover.current.contains(event.target)) {\n          setOpenSecondaryMenu(false);\n        }\n      }\n\n      if (versions?.length) {\n        if (!versionPopover.current.contains(event.target)) {\n          setOpenVersionMenu(false);\n        }\n      }\n    };\n\n    document.addEventListener('click', onClick);\n\n    return () => document.removeEventListener('click', onClick);\n  }, []);\n\n  return (\n    <header\n      role=\"banner\"\n      css={css`\n        ${stretched}\n        border-bottom: var(--spectrum-global-dimension-size-10) solid var(--spectrum-global-color-gray-200);\n        box-sizing: border-box;\n\n        @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n          #GlobalHeader-grid {\n            grid-template-columns: minmax(auto, min-content) auto 0 0 !important;\n            margin-right: 0 !important;\n            margin-left: 0 !important;\n            height: calc(100% + var(--spectrum-global-dimension-size-10)) !important;\n            overflow: hidden;\n          }\n\n          #GlobalHeader-grid-navigation {\n            overflow-x: auto;\n            overflow-x: overlay;\n            overflow-y: hidden;\n\n            .spectrum-Tabs {\n              padding-bottom: var(--spectrum-global-dimension-size-400);\n              margin-top: var(--spectrum-global-dimension-size-400);\n\n              ${versions?.length > 0 &&\n              `\n                & > .spectrum-Tabs-item:first-of-type {\n                  margin-right: var(--spectrum-global-dimension-size-300);\n                }\n              `}\n            }\n\n            .spectrum-Tabs-selectionIndicator {\n              bottom: calc(\n                var(--spectrum-global-dimension-size-400) - var(--spectrum-global-dimension-size-125)\n              ) !important;\n            }\n          }\n\n          #GlobalHeader-title {\n            svg {\n              margin-right: var(--spectrum-global-dimension-size-100);\n            }\n\n            strong {\n              display: none;\n            }\n          }\n\n          #GlobalHeader-grid-optional {\n            display: none;\n          }\n        }\n      `}>\n      <nav css={stretched} role=\"navigation\" aria-label=\"Global\">\n        <Grid\n          id=\"GlobalHeader-grid\"\n          areas={['title navigation optional']}\n          columns={['minmax(auto, min-content)', 'auto', 'size-2400']}\n          alignItems=\"center\"\n          marginX=\"size-400\"\n          height=\"100%\">\n          <View gridArea=\"title\" height=\"100%\">\n            <Flex height=\"100%\" alignItems=\"center\">\n              <Flex alignItems=\"center\">\n                <div\n                  css={css`\n                    margin-right: var(--spectrum-global-dimension-size-50);\n                    display: none;\n\n                    @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                      display: block;\n                      visibility: ${hasSideNav ? 'visible' : 'hidden'};\n                    }\n                  `}>\n                  <ActionButton\n                    isQuiet\n                    onClick={() => {\n                      toggleSideNav && toggleSideNav();\n                    }}>\n                    <TripleGripper />\n                  </ActionButton>\n                </div>\n                <a\n                  href={globalNav.home.path}\n                  css={css`\n                    text-decoration: none;\n                  `}>\n                  <Flex alignItems=\"center\" id=\"GlobalHeader-title\">\n                    {globalNav.home.logo === 'adobe' ? (\n                      <Adobe\n                        css={css`\n                          width: var(--spectrum-global-dimension-size-300);\n                          height: var(--spectrum-global-dimension-size-250);\n                          display: block;\n                          margin-right: var(--spectrum-global-dimension-size-100);\n                        `}\n                      />\n                    ) : (\n                      globalNav.home.logo\n                    )}\n                    <strong className=\"spectrum-Heading--XXS\">{globalNav.home.title}</strong>\n                  </Flex>\n                </a>\n              </Flex>\n              {globalNav.menus.map((menu, index) => {\n                const isPrimary = index === 0;\n                const id = nextId();\n\n                return (\n                  <div\n                    key={index}\n                    css={css`\n                      box-sizing: border-box;\n                      padding: var(--spectrum-global-dimension-size-200) var(--spectrum-global-dimension-size-300) 0\n                        var(--spectrum-global-dimension-size-300);\n                      height: calc(100% + var(--spectrum-global-dimension-size-10));\n                      border-left: 1px solid transparent;\n                      border-right: 1px solid transparent;\n                      ${isPrimary\n                        ? `\n                        margin-left: var(--spectrum-global-dimension-size-300);\n                        `\n                        : ''}\n                      ${globalNav.menus.length === 1\n                        ? `\n                          border-color: var(--spectrum-global-color-gray-200);\n                        `\n                        : ''}\n                        \n                        @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                        display: none;\n                      }\n                    `}>\n                    {menu.path ? (\n                      <ActionButton elementType=\"a\" isQuiet href={menu.path} {...getExternalLinkProps(menu.path)}>\n                        <Text>{menu.title}</Text>\n                      </ActionButton>\n                    ) : (\n                      <>\n                        <PickerButton\n                          isQuiet\n                          isOpen={isPrimary ? openPrimaryMenu : openSecondaryMenu}\n                          ariaControls={id}\n                          onClick={(event) => {\n                            event.stopPropagation();\n                            event.nativeEvent.stopImmediatePropagation();\n\n                            if (isPrimary) {\n                              setOpenPrimaryMenu((openPrimaryMenu) => !openPrimaryMenu);\n                              setOpenSecondaryMenu(false);\n                            } else {\n                              setOpenSecondaryMenu((openSecondaryMenu) => !openSecondaryMenu);\n                              setOpenPrimaryMenu(false);\n                            }\n\n                            setOpenVersionMenu(false);\n                          }}>\n                          {menu.title}\n                        </PickerButton>\n                        <Popover\n                          ref={isPrimary ? primaryPopover : secondaryPopover}\n                          id={id}\n                          variant=\"picker\"\n                          isQuiet\n                          isOpen={isPrimary ? openPrimaryMenu : openSecondaryMenu}\n                          css={css`\n                            display: block;\n                            padding: var(--spectrum-global-dimension-size-300);\n                            z-index: 2;\n                            max-width: none !important;\n                            max-height: none !important;\n                            width: auto !important;\n                          `}>\n                          <nav aria-label=\"Secondary\">\n                            <Flex>\n                              {menu.sections.map((section, i) => (\n                                <View key={i} marginEnd=\"size-400\" position=\"relative\">\n                                  <View>\n                                    {section.heading && (\n                                      <View marginBottom=\"size-200\" marginStart=\"size-200\">\n                                        <strong className=\"spectrum-Heading--S\">{section.heading}</strong>\n                                      </View>\n                                    )}\n                                    <ul className=\"spectrum-AssetList\">\n                                      {section.pages.map((page, k) => (\n                                        <li\n                                          key={k}\n                                          className=\"spectrum-AssetList-item\"\n                                          css={css`\n                                            width: auto !important;\n                                            height: auto !important;\n                                            min-height: var(--spectrum-global-dimension-size-500) !important;\n                                            ${page.description\n                                              ? 'margin-bottom: var(--spectrum-global-dimension-size-200);'\n                                              : ''}\n                                          `}>\n                                          <a\n                                            css={css`\n                                              display: flex;\n                                              z-index: 1;\n                                              height: 100%;\n                                              width: 100%;\n                                              align-items: center;\n                                              color: inherit;\n                                              text-decoration: none;\n                                              padding-top: var(--spectrum-global-dimension-size-100);\n                                              padding-bottom: var(--spectrum-global-dimension-size-100);\n                                            `}\n                                            href={page.path}\n                                            {...getExternalLinkProps(page.path)}>\n                                            <Flex direction=\"column\">\n                                              <View>{page.title}</View>\n                                              {page.description && (\n                                                <View marginTop=\"size-100\">\n                                                  <span\n                                                    className=\"spectrum-Body--XS\"\n                                                    css={css`\n                                                      color: var(--spectrum-global-color-gray-700);\n                                                    `}>\n                                                    {page.description}\n                                                  </span>\n                                                </View>\n                                              )}\n                                            </Flex>\n                                          </a>\n                                        </li>\n                                      ))}\n                                    </ul>\n                                  </View>\n                                  {section.divider && (\n                                    <div\n                                      css={css`\n                                        position: absolute;\n                                        height: 100%;\n                                        top: 0;\n                                        right: calc(-1 * var(--spectrum-global-dimension-size-200));\n                                      `}>\n                                      <Divider orientation=\"vertical\" marginStart=\"size-200\" size=\"M\" height=\"100%\" />\n                                    </div>\n                                  )}\n                                </View>\n                              ))}\n                            </Flex>\n                            {menu.sections[0].viewAll && (\n                              <View marginTop=\"size-100\" marginStart=\"size-200\">\n                                <Link isQuiet={true}>\n                                  <a\n                                    href={menu.sections[0].viewAll.path}\n                                    {...getExternalLinkProps(menu.sections[0].viewAll.path)}>\n                                    <strong>{menu.sections[0].viewAll.title}</strong>\n                                  </a>\n                                </Link>\n                              </View>\n                            )}\n                          </nav>\n                        </Popover>\n                      </>\n                    )}\n                  </div>\n                );\n              })}\n            </Flex>\n          </View>\n          <View\n            id=\"GlobalHeader-grid-navigation\"\n            gridArea=\"navigation\"\n            marginStart={globalNav.menus.length === 1 ? 'size-200' : 'size-0'}>\n            <Tabs\n              ref={nav}\n              onFontsReady={() => {\n                positionSelectedTabIndicator();\n                setIsAnimated(true);\n              }}>\n              {discoverMenu && (\n                <div\n                  css={css`\n                    display: none;\n                    margin-right: var(--spectrum-global-dimension-size-300);\n\n                    @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                      display: block;\n                    }\n                  `}>\n                  <TabsItem elementType=\"a\" href={discoverMenu.path}>\n                    {discoverMenu.title}\n                  </TabsItem>\n                </div>\n              )}\n              {pages.map((page, i) => {\n                const { title, path } = page;\n                const ref = createRef();\n                tabs.push(ref);\n\n                return (\n                  <React.Fragment key={i}>\n                    <TabsItem elementType={GatsbyLink} ref={ref} to={path} selected={getSelectedTabIndex() === i}>\n                      {title}\n                    </TabsItem>\n                    {i === 0 && versions?.length > 0 && (\n                      <div\n                        css={css`\n                          margin-left: var(--spectrum-global-dimension-size-100) !important;\n                          margin-right: var(--spectrum-global-dimension-size-300);\n\n                          @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                            display: none;\n                          }\n                        `}>\n                        <PickerButton\n                          isQuiet\n                          isOpen={openVersionMenu}\n                          ariaControls={versionPopoverId}\n                          onClick={(event) => {\n                            event.stopPropagation();\n                            event.nativeEvent.stopImmediatePropagation();\n\n                            setOpenVersionMenu((openVersionMenu) => !openVersionMenu);\n                            setOpenPrimaryMenu(false);\n                            setOpenSecondaryMenu(false);\n                          }}>\n                          {versions[0].title}\n                        </PickerButton>\n                        <Popover\n                          ref={versionPopover}\n                          id={versionPopoverId}\n                          variant=\"picker\"\n                          isQuiet\n                          isOpen={openVersionMenu}>\n                          <Menu>\n                            {versions.map((version, i) => {\n                              const isFirst = i === 0;\n\n                              return (\n                                <MenuItem key={i} isSelected={isFirst} isHighlighted={isFirst} href={version.path}>\n                                  {version.title}\n                                </MenuItem>\n                              );\n                            })}\n                          </Menu>\n                        </Popover>\n                      </div>\n                    )}\n                  </React.Fragment>\n                );\n              })}\n              <TabsIndicator\n                ref={selectedTabIndicator}\n                css={css`\n                  bottom: calc(-1 * var(--spectrum-global-dimension-size-125)) !important;\n                `}\n              />\n              <View marginStart=\"size-400\">\n                {docs && (\n                  <AnchorButton variant=\"primary\" href={docs.path}>\n                    View Docs\n                  </AnchorButton>\n                )}\n              </View>\n            </Tabs>\n          </View>\n          <View id=\"GlobalHeader-grid-optional\" gridArea=\"optional\" justifySelf=\"flex-end\">\n            {(globalNav.console || globalNav.signIn) && (\n              <ButtonGroup>\n                {globalNav.console && (\n                  <AnchorButton variant=\"primary\" href=\"https://console.adobe.io\">\n                    Console\n                  </AnchorButton>\n                )}\n                {globalNav.signIn && (\n                  <AnchorButton isQuiet variant=\"primary\" href=\"https://adobe.io\">\n                    Sign in\n                  </AnchorButton>\n                )}\n              </ButtonGroup>\n            )}\n          </View>\n        </Grid>\n      </nav>\n    </header>\n  );\n};\n\nGlobalHeader.propTypes = {\n  globalNav: PropTypes.object,\n  pages: PropTypes.array,\n  docs: PropTypes.object,\n  location: PropTypes.object,\n  toggleSideNav: PropTypes.func,\n  hasSideNav: PropTypes.bool\n};\n\nexport { GlobalHeader };\n"],"sourceRoot":""}