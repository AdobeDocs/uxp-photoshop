(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{rkT3:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return c})),t.d(n,"default",(function(){return d}));var s=t("wx14"),i=t("zLVn"),a=(t("q1tI"),t("7ljp")),o=t("LHWr"),c=(t("qKvR"),{}),r={_frontmatter:c},l=o.a;function d(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.mdx)(l,Object(s.a)({},r,t,{components:n,mdxType:"MDXLayout"}),Object(a.mdx)("p",null,"For developers with the intent to utilize the C++ based plugin SDK in conjunction with a UXP based plugin, the C++ SDK now includes a method to communicate with its UXP counterpart. On C++ side, we use the component's plugin name property in the plugin resource to identify plugins, and on UXP side, we use the ",Object(a.mdx)("inlineCode",{parentName:"p"},"id")," field from the ",Object(a.mdx)("inlineCode",{parentName:"p"},"manifest.json")," file."),Object(a.mdx)("h1",{id:"piuxpsuite"},"PIUXPSuite"),Object(a.mdx)("p",null,"The PIUXPSuite communicates with UXP plugins using PIActionDescriptors. Use the ActionDescriptor suite as defined in the SDK's ",Object(a.mdx)("inlineCode",{parentName:"p"},"PIAction.h")," whenever using this suite. To start with, grab ",Object(a.mdx)("a",Object(s.a)({parentName:"p"},{href:"assets/PIUXPSuite.h"}),"PIUXPSuite.h")," and add it to your plugin project."),Object(a.mdx)("p",null,"The signatures in ",Object(a.mdx)("inlineCode",{parentName:"p"},"PIUXPSuite.h")," are as follows:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(s.a)({parentName:"pre"},{className:"language-cpp"}),"typedef void (*PIUXPMessageNotifier)(PIActionDescriptor descriptor);\ntypedef struct PsUXPSuite1\n{\n    SPAPI SPErr (*SendUXPMessage) (SPPluginRef selfRef, const char* uxpPluginId, PIActionDescriptor descriptor);\n    SPAPI SPErr (*AddUXPMessageListener) (SPPluginRef selfRef, PIUXPMessageNotifier notifier);\n    SPAPI SPErr (*RemoveUXPMessageListener) (SPPluginRef selfRef);\n\n} PsUXPSuite1;\n")),Object(a.mdx)("h1",{id:"csdk-to-uxp-messaging"},"CSDK to UXP messaging"),Object(a.mdx)("p",null,Object(a.mdx)("inlineCode",{parentName:"p"},"PsUXPSuite1.SendUXPMessage")," can be used to send messages to a UXP plugin given the plugin ID (from ",Object(a.mdx)("inlineCode",{parentName:"p"},"manifest.json"),") and an action descriptor containing the message. "),Object(a.mdx)("h2",{id:"includes-and-globals"},"Includes and globals"),Object(a.mdx)("p",null,"First, make sure to include the right files and declare the globals to store the important pointers."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(s.a)({parentName:"pre"},{className:"language-cpp"}),'// Include these\n#include "PIActions.h" // For PIActionDescriptor\n#include "PIUXPSuite.h" // For messaging\n\n// Your globals\nSPBasicSuite * sSPBasic = NULL; // This is passed to your main function\nSPPluginRef gPlugInRef = NULL; // This is passed to your main function\nPsUXPSuite1* sUxpProcs = NULL; // You acquire this using sSPBasic\nPSActionDescriptorProcs* sDescriptorProcs = NULL; // You acquire this using sSPBasic\n')),Object(a.mdx)("h2",{id:"based-on-plugin-type"},"Based on Plugin Type..."),Object(a.mdx)("h3",{id:"automation-plugins-autopluginmain"},"Automation Plugins: ",Object(a.mdx)("inlineCode",{parentName:"h3"},"AutoPluginMain")),Object(a.mdx)("p",null,"For Automation plugins, the entry method is called ",Object(a.mdx)("inlineCode",{parentName:"p"},"AutoPluginMain")," use the code below to extract the plugin reference and the basic suite."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(s.a)({parentName:"pre"},{className:"language-cpp"}),"DLLExport SPAPI SPErr AutoPluginMain(const char* caller, const char* selector, void* message) {\n\n    SPMessageData* basicMessage = (SPMessageData*) message;\n    sSPBasic = basicMessage->basic;\n    gPlugInRef = basicMessage->self;\n    ...\n")),Object(a.mdx)("h3",{id:"filter-plugins-pluginmain"},"Filter plugins: ",Object(a.mdx)("inlineCode",{parentName:"h3"},"PluginMain")),Object(a.mdx)("p",null,"Filter plugins use an entry method called ",Object(a.mdx)("inlineCode",{parentName:"p"},"PluginMain"),", in which you can grab the basic suite and the plugin reference directly."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(s.a)({parentName:"pre"},{className:"language-cpp"}),"DLLExport MACPASCAL void PluginMain(const int16 selector,\n                                    FilterRecordPtr filterRecord,\n                                    intptr_t * data,\n                                    int16 * result) {\n    sSPBasic = filterRecord->sSPBasic;\n    gPlugInRef = filterRecord->plugInRef; \n    ...\n")),Object(a.mdx)("h2",{id:"acquiring-the-suites"},"Acquiring the suites"),Object(a.mdx)("p",null,"Next up is acquiring the correct suites to create your messages with ActionDescriptors and sending them to the UXP plugin of your choice."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(s.a)({parentName:"pre"},{className:"language-cpp"}),"// in your main method\n    sSPBasic->AcquireSuite(kPSUXPSuite,\n                           kPSUXPSuiteVersion1,\n                           (const void**)&sUxpProcs);\n\n    sSPBasic->AcquireSuite(kPSActionDescriptorSuite,\n                           kPSActionDescriptorSuiteVersion,\n                           (const void**)&sDescriptorProcs);\n\n    PIActionDescriptor desc;\n    sDescriptorProcs->Make(&desc);\n    sDescriptorProcs->PutString(desc, 'helo', \"Hello World!\");\n    sDescriptorProcs->PutFloat(desc, 'fltp', 0.952);\n\n    const char* UXP_MANIFEST_ID = \"com.your.pluginId\";\n    sUxpProcs->SendUXPMessage(gPlugInRef, UXP_MANIFEST_ID, desc);\n}\n")),Object(a.mdx)("h2",{id:"on-your-uxp-plugin"},"On your UXP plugin"),Object(a.mdx)("p",null,"Add a messaging listener using the ",Object(a.mdx)("inlineCode",{parentName:"p"},"messaging")," API group. Any descriptors sent from a CSDK plugin to the ID of this plugin will arrive on this callback."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),"let callback = (o) => { \n    console.log(\"Message from \" + o.pluginId + \":\" + o.message); \n}\n\nrequire('photoshop').messaging.addSDKMessagingListener(callback);\n\n...\n// You can remove your listener using this API\nrequire('photoshop').messaging.removeSDKMessagingListener(callback);\n")),Object(a.mdx)("h1",{id:"uxp-to-csdk-messaging"},"UXP to CSDK messaging"),Object(a.mdx)("p",null,"For communication from a UXP plugin to a C plugin, define a listener within your CPlugin, and utilize both ",Object(a.mdx)("inlineCode",{parentName:"p"},"AddUXPMessageListener")," and ",Object(a.mdx)("inlineCode",{parentName:"p"},"RemoveUXPMessageListener")," at the appropriate time."),Object(a.mdx)("h2",{id:"listener-callback"},"Listener Callback"),Object(a.mdx)("p",null,"All messages sent to this plugin will be handled in this method"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(s.a)({parentName:"pre"},{className:"language-cpp"}),"void UXPMessageHandler(PIActionDescriptor descriptor) {\n    // do something\n}\n")),Object(a.mdx)("h2",{id:"adding-listener"},"Adding listener"),Object(a.mdx)("p",null,"Use the code below where you'd like to start listening to messages."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(s.a)({parentName:"pre"},{className:"language-cpp"}),"sUxpProcs->AddUXPMessageListener(gPlugInRef, UXPMessageHandler);\n")),Object(a.mdx)("h2",{id:"removing-listener"},"Removing listener"),Object(a.mdx)("p",null,"Use the code below to stop listening to messages from UXP plugins."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(s.a)({parentName:"pre"},{className:"language-cpp"}),"sUxpProcs->RemoveUXPMessageListener(gPlugInRef);\n")),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("em",{parentName:"p"},"NOTE"),": Only one notifier per plugin may be registered.")),Object(a.mdx)("h2",{id:"sending-the-message-from-uxp"},"Sending the message from UXP"),Object(a.mdx)("p",null,"To send messages to the C Plugin, take note of the Component Id as defined in its resouce ",Object(a.mdx)("inlineCode",{parentName:"p"},"PiPL"),". This is the second parameter of the ",Object(a.mdx)("inlineCode",{parentName:"p"},"PIComponentProperty"),"."),Object(a.mdx)("p",null,"With this Id, use the messaging group of the photoshop package to send your message across."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),"let messageContent = {\n    status: \"ok\",\n    filter: 416\n};\nwindow.require('photoshop').messaging.sendSDKPluginMessage(<YourPluginComponentId>, messageContent);\n")))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-ps-reference-media-advanced-cpp-pluginsdk-md-5e4b2e14f8a39747bdde.js.map