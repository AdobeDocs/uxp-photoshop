{"version":3,"sources":["webpack://uxp-photoshop-documentation/./src/pages/code_samples/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0RAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,yBACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,gBADR,iBAGA,eACE,GAAM,YADR,aAGA,oRACA,8DAA+C,cAAGC,WAAW,IACzD,KAAQ,6DADmC,QAA/C,mKAEoL,uBAAYA,WAAW,KAAvB,QAFpL,wCAGA,8DACA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,mDAAqE,eAAIA,WAAW,KAAf,QAArE,0OAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,mOAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,oJAGJ,kSAAmR,uBAAYA,WAAW,KAAvB,iBAAnR,yDACA,eACE,GAAM,6BADR,8BAGA,sIAAuH,cAAGA,WAAW,IACjI,KAAQ,uBAD2G,SAAvH,4HAGA,sSACA,uTACA,wPACA,eACE,GAAM,aADR,cAGA,yGAA0F,uBAAYA,WAAW,KAAvB,aAA1F,4NAKJJ,EAAWK,gBAAiB","file":"component---src-pages-code-samples-index-md-fe6982695d38a9b00a45.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"code-samples\"\n    }}>{`Code Samples`}</h1>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Here are some examples of plugins you can create with UXP in Photoshop. On GitHub, they exist as fully formed projects that you can load immediately to get a flavor for how things work; then you can modify the projects so they become more your own code.`}</p>\n    <p>{`The samples are all available on GitHub `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/uxp-photoshop-plugin-samples\"\n      }}>{`here`}</a>{` where you can clone or fork them. If you're not familiar with GitHub and just want to download the examples, click on the link above and just click the green `}<inlineCode parentName=\"p\">{`Code`}</inlineCode>{` button, then click \"Download ZIP.\"`}</p>\n    <p>{`There are three basic kinds of plugins:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Direct Action (\"headless\") - a plugin doesn't `}<em parentName=\"p\">{`have`}</em>{` to present a UI to the user. If you want to create a plugin that does the same thing each time without any user input, or gets its parameters some other way (say, a configuration file or a website), this might be the way to go.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Modal Dialog - many plugins can use a simple dialog box to get parameters from the user, then execute code based on those parameters. If you're coming from ExtendScript, you'll most likely be building this type of plugin.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Panel - panels are everywhere in Photoshop, and plugins can present first-class panels that look and feel like the ones built into Photoshop.`}</p>\n      </li>\n    </ul>\n    <p>{`A given plugin can use one or all of the above approaches. For example, a single plugin could use a modal dialog for some operations, a panel for others, and a direct action (invoked by a flyout menu in a panel or a Photoshop's Plugins menu) for other operations. The `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{` specifies what the entry points of your plugin are.`}</p>\n    <h2 {...{\n      \"id\": \"plain-javascript-vs-react\"\n    }}>{`Plain JavaScript vs React`}</h2>\n    <p>{`These samples come in two flavors: one uses plain JavaScript with no extra frameworks, while the other uses the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org\"\n      }}>{`React`}</a>{` JavaScript framework. If you've never used React, definitely start with the plain (aka \"vanilla\") JavaScript samples.`}</p>\n    <p>{`The React versions support richer, more complex user interactions, but contain code that will be foreign to you if you've never used React. The packaging of a React-based plugin is also more complex than one using plain JavaScript, due to the dependencies React requires.`}</p>\n    <p>{`When you build a React-based plugin, you will be using command-line tools for the build process, although you can use the UXP Developer Tool for loading and debugging. When you build a plugin that uses plain JavaScript, you only need the UXP Developer Tool (and a text editor, of course).`}</p>\n    <p>{`If you're writing a plugin with a complex UI (for example, a UI that changes depending upon what item in a listbox is selected, or a UI that changes based on the user's selection in Photoshop), you probably want to use React.`}</p>\n    <h2 {...{\n      \"id\": \"batchplay\"\n    }}>{`batchPlay`}</h2>\n    <p>{`As you browse through the sample code, you'll see occasional use of a method named `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{`. This is a way for your plugin to call Photoshop methods and retrieve data that isn't yet available through the Photoshop API for UXP. There are a number of batchPlay examples to show typical usage of this feature.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}