{"version":3,"sources":["webpack:///./src/pages/guides/uxp_guide/flyout-menus.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,IACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,gBADR,gBAGA,qLAAkK,4BAAYC,WAAW,KAAvB,iBAAlK,8JACA,mBAAQ,CACN,GAAM,yBADR,yBAGA,gGAA6E,4BAAYA,WAAW,KAAvB,SAA7E,4PAA0X,4BAAYA,WAAW,KAAvB,gBAA1X,KACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ikBAwBL,mBAAQ,CACN,GAAM,oBADR,oBAGA,8BAAW,4BAAYA,WAAW,KAAvB,gBAAX,0IACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mUAuBTJ,EAAWK,gBAAiB","file":"component---src-pages-guides-uxp-guide-flyout-menus-md-b054cab14c090c63480e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-parliament/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"flyout-menus\"\n    }}>{`Flyout Menus`}</h1>\n    <p>{`In beta versions of UXP for Photoshop, flyout menus (menus that show up in the two-patty hamburger icon at the top right of the panel) were defined in the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{` file. This is no longer the case. For flexibility, flyout menus are now defined by supplying a JSON structure to UXP at runtime, as in the example below.`}</p>\n    <h2 {...{\n      \"id\": \"defining-flyout-menus\"\n    }}>{`Defining Flyout Menus`}</h2>\n    <p>{`Flyout menus are defined by a JSON structure that's passed to the UXP `}<inlineCode parentName=\"p\">{`setup`}</inlineCode>{` method. The JSON tells UXP what the menuitems are, and what to do when they're invoked. In the following example, there are three starship-related menuitems. When a menuitem is chosen by the user (\"invoked\"), UXP calls the plugin-defined function `}<inlineCode parentName=\"p\">{`handleFlyout`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { entrypoints } = require(\"uxp\");\n// the setup() function tells UXP how to handle\n// the entrypoints defined in your manifest.json file.\nentrypoints.setup({\n  panels: {\n    my_panel_entrypoint: {\n      show() {\n        // usually panels are already populated\n        // from the HTML, so we do nothing here\n      },\n      menuItems: [\n        {id: \"item1\", label: \"Warp Factor 1\"},\n        {id: \"item2\", label: \"Shields Up\"},\n        {id: \"item3\", label: \"Engage\"}\n      ],\n      invokeMenu(id) {\n        handleFlyout(id);\n      }\n    }\n  }\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"handling-flyouts\"\n    }}>{`Handling Flyouts`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`handleFlyout`}</inlineCode>{` function (defined above) gets passed the flyout menu id. It can use this id to dispatch code to handle each menuitem, as shown below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function handleFlyout(id) {\n  switch (id) {\n    case \"item1\": {\n        console.log(\"aye captain\");\n        break;\n    }\n    case \"item2\": {\n        console.log(\"shields at 40 percent\");\n        break;\n    }\n    case \"item3\": {\n        console.log(\"warp drive is offline\");\n        break;\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}