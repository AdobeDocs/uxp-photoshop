{"version":3,"sources":["webpack://uxp-photoshop-documentation/./node_modules/@adobe/gatsby-theme-aio/src/components/Search/index.js"],"names":["SEARCH_INPUT_WIDTH","SEARCH_KEYWORDS","setQueryStringParameter","name","value","params","URLSearchParams","window","location","search","set","history","replaceState","pathname","mapToIndexName","searchIndex","map","index","Object","keys","searchSuggestions","algolia","query","indexAll","queries","filter","forEach","indexName","push","hitsPerPage","Math","ceil","length","attributesToRetrieve","multipleQueries","searchIndexes","selectedIndex","keywords","Array","isArray","initIndex","facets","filters","keyword","join","mapSearchResults","hits","results","objectID","url","_highlightResult","mapKeywordResults","add","Search","showSearch","setShowSearch","searchButtonId","useState","searchQuery","setSearchQuery","setSelectedIndex","selectedKeywords","setSelectedKeyWords","showSearchResults","setShowSearchResults","isFocused","setIsFocused","showClear","setShowClear","searchRef","useRef","inputRef","searchResultsRef","searchSuggestionResults","setSearchSuggestionResults","searchResults","setSearchResults","keywordResults","setKeywordResults","isSuggestionsOpen","setIsSuggestionsOpen","triggerSearch","setTriggerSearch","selectedTabIndicator","isAnimated","setIsAnimated","positionSelectedTabIndicator","selectedTab","indexOf","tabRef","current","animateIndicator","positionIndicator","SEARCH_PARAMS","mappedSearchResults","mappedKeywordResults","Set","from","useEffect","searchParams","URL","get","split","focus","scrollTop","onClick","target","contains","id","document","addEventListener","removeEventListener","onEscape","key","ref","css","MOBILE_SCREEN_WIDTH","className","onSubmit","event","preventDefault","classNames","Magnify","onFocus","onBlur","onChange","e","suggestions","title","description","type","placeholder","autoComplete","Cross","isOpen","searchSuggestion","i","isHighlighted","href","origin","DESKTOP_SCREEN_WIDTH","SIDENAV_WIDTH","isSelected","includes","checked","selectedKeyword","onFontsReady","indexLabel","element","selected","tabIndex","searchResult","to","dangerouslySetInnerHTML","__html","variant","xmlns","viewBox","d"],"mappings":"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","file":"379b34f3-1c254ebfea3ffee05fde.js","sourcesContent":["/**\n *  Copyright 2020 Adobe. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { css } from '@emotion/react';\nimport { AnchorLink } from '../AnchorLink';\nimport {\n  Tabs,\n  Item as TabsItem,\n  Label as TabsItemLabel,\n  TabsIndicator,\n  positionIndicator,\n  animateIndicator\n} from '../Tabs';\nimport { Item as MenuItem, Menu } from '../Menu';\nimport { Popover } from '../Popover';\nimport PropTypes from 'prop-types';\nimport { MOBILE_SCREEN_WIDTH, DESKTOP_SCREEN_WIDTH, SIDENAV_WIDTH, SEARCH_PARAMS } from '../../utils';\nimport classNames from 'classnames';\nimport '@spectrum-css/typography';\nimport '@spectrum-css/textfield';\nimport '@spectrum-css/search';\nimport '@spectrum-css/button';\nimport { Cross, Magnify } from '../Icons';\nimport { Checkbox } from '../Checkbox';\n\nconst SEARCH_INPUT_WIDTH = '688px';\nconst SEARCH_INDEX_ALL = 'all';\nconst SEARCH_KEYWORDS = 'keywords';\nconst SUGGESTION_MAX_RESULTS = 10;\nconst SEARCH_MAX_RESULTS = 100;\n\n// Used to update the url in the browser\nconst setQueryStringParameter = (name, value) => {\n  const params = new URLSearchParams(window.location.search);\n  params.set(name, value);\n  window.history.replaceState({}, '', `${window.location.pathname}?${params}`);\n};\n\nconst mapToIndexName = (searchIndex) => searchIndex.map((index) => Object.keys(index)[0]);\n\nconst searchSuggestions = async (algolia, query, searchIndex, indexAll) => {\n  const queries = [];\n  // By default use all indexes\n  if (Object.keys(searchIndex[0])[0] === SEARCH_INDEX_ALL) {\n    searchIndex = indexAll;\n  }\n  // Or use specific indexes without \"all\" index\n  else {\n    searchIndex = mapToIndexName(searchIndex).filter((index) => index !== SEARCH_INDEX_ALL);\n  }\n\n  searchIndex.forEach((indexName) => {\n    queries.push({\n      indexName,\n      query,\n      params: {\n        hitsPerPage: Math.ceil(SUGGESTION_MAX_RESULTS / searchIndex.length),\n        attributesToRetrieve: ['objectID', 'url', 'title', 'description']\n      }\n    });\n  });\n\n  return await algolia.multipleQueries(queries);\n};\n\nconst searchIndexes = async (algolia, query, selectedIndex, indexAll, keywords) => {\n  if (selectedIndex === 'all') {\n    selectedIndex = indexAll;\n  }\n\n  // Single index search\n  if (!Array.isArray(selectedIndex)) {\n    const index = algolia.initIndex(selectedIndex);\n\n    return await index.search(query, {\n      facets: [SEARCH_KEYWORDS],\n      attributesToRetrieve: ['objectID', 'url'],\n      hitsPerPage: SEARCH_MAX_RESULTS,\n      filters: keywords.map((keyword) => `${SEARCH_KEYWORDS}:\"${keyword}\"`).join(' AND ')\n    });\n  }\n  // Multi index search\n  else {\n    const queries = [];\n    selectedIndex.forEach((indexName) => {\n      queries.push({\n        indexName,\n        query,\n        params: {\n          facets: [SEARCH_KEYWORDS],\n          attributesToRetrieve: ['objectID', 'url'],\n          hitsPerPage: Math.ceil(SEARCH_MAX_RESULTS / selectedIndex.length),\n          filters: keywords.map((keyword) => `${SEARCH_KEYWORDS}:\"${keyword}\"`).join(' AND ')\n        }\n      });\n    });\n\n    return await algolia.multipleQueries(queries);\n  }\n};\n\nconst mapSearchResults = (hits, results) => {\n  hits.forEach(({ objectID, url, _highlightResult }) => {\n    results.push({\n      objectID,\n      url,\n      _highlightResult\n    });\n  });\n};\n\nconst mapKeywordResults = (facets, results) => {\n  if (facets[SEARCH_KEYWORDS]) {\n    Object.keys(facets[SEARCH_KEYWORDS]).forEach((keyword) => results.add(keyword));\n  }\n};\n\nconst Search = ({ algolia, searchIndex, indexAll, showSearch, setShowSearch, searchButtonId }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(mapToIndexName(searchIndex)[0]);\n  const [selectedKeywords, setSelectedKeyWords] = useState([]);\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const [showClear, setShowClear] = useState(false);\n  const searchRef = useRef(null);\n  const inputRef = useRef(null);\n  const searchResultsRef = useRef(null);\n  const [searchSuggestionResults, setSearchSuggestionResults] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [keywordResults, setKeywordResults] = useState([]);\n  const [isSuggestionsOpen, setIsSuggestionsOpen] = useState(false);\n  const [triggerSearch, setTriggerSearch] = useState(false);\n  const selectedTabIndicator = useRef(null);\n  // Don't animate the tab indicator by default\n  const [isAnimated, setIsAnimated] = useState(false);\n\n  const getSelectedTabIndex = () => searchIndex[mapToIndexName(searchIndex).indexOf(selectedIndex)].tabRef;\n\n  const positionSelectedTabIndicator = (selectedTab = getSelectedTabIndex()) => {\n    if (showSearchResults && selectedTab?.current) {\n      animateIndicator(selectedTabIndicator, isAnimated);\n      positionIndicator(selectedTabIndicator, selectedTab);\n    }\n  };\n\n  const search = async () => {\n    if (searchQuery.length) {\n      setIsSuggestionsOpen(false);\n      setQueryStringParameter(SEARCH_PARAMS.query, searchQuery);\n      setQueryStringParameter(SEARCH_PARAMS.keywords, selectedKeywords);\n      setQueryStringParameter(SEARCH_PARAMS.index, selectedIndex);\n\n      positionSelectedTabIndicator();\n      setShowSearchResults(true);\n\n      const search = await searchIndexes(algolia, searchQuery, selectedIndex, indexAll, selectedKeywords);\n\n      const mappedSearchResults = [];\n      // Use Set to avoid duplicated keywords\n      const mappedKeywordResults = new Set();\n\n      if (search?.results?.length) {\n        search.results.forEach(({ hits, facets }) => {\n          mapSearchResults(hits, mappedSearchResults);\n          mapKeywordResults(facets, mappedKeywordResults);\n        });\n      } else if (search?.hits?.length) {\n        mapSearchResults(search.hits, mappedSearchResults);\n        mapKeywordResults(search.facets, mappedKeywordResults);\n      }\n\n      setSearchResults(mappedSearchResults);\n      setKeywordResults(Array.from(mappedKeywordResults));\n    }\n  };\n\n  useEffect(() => {\n    if (showSearch) {\n      // Read search params\n      const searchParams = new URL(window.location).searchParams;\n      const query = searchParams.get(SEARCH_PARAMS.query);\n      const keywords = searchParams.get(SEARCH_PARAMS.keywords);\n      const index = searchParams.get(SEARCH_PARAMS.index);\n\n      if (index) {\n        setSelectedIndex(index);\n      }\n\n      if (keywords) {\n        setSelectedKeyWords(keywords.split(','));\n      }\n\n      if (query?.length) {\n        setSearchQuery(query);\n        setShowClear(true);\n\n        setTriggerSearch(true);\n      }\n\n      // Autofocus\n      if (inputRef?.current) {\n        inputRef.current.focus();\n      }\n    }\n  }, [showSearch]);\n\n  useEffect(() => {\n    search();\n  }, [selectedIndex, selectedKeywords]);\n\n  useEffect(() => {\n    if (triggerSearch) {\n      setTriggerSearch(false);\n      search();\n    }\n  }, [triggerSearch, setTriggerSearch]);\n\n  useEffect(() => {\n    if (searchResultsRef?.current) {\n      searchResultsRef.current.scrollTop = 0;\n    }\n  }, [searchResults]);\n\n  useEffect(() => {\n    if (showSearchResults) {\n      positionSelectedTabIndicator();\n\n      setIsAnimated(true);\n    } else {\n      setIsAnimated(false);\n    }\n  }, [showSearchResults]);\n\n  useEffect(() => {\n    const onClick = ({ target }) => {\n      setIsSuggestionsOpen(false);\n\n      if (searchRef.current && !searchRef.current.contains(target) && target.id !== searchButtonId) {\n        setShowSearch(false);\n      }\n    };\n\n    document.addEventListener('click', onClick, true);\n    return () => {\n      document.removeEventListener('click', onClick, true);\n    };\n  }, [setIsSuggestionsOpen, showSearchResults, setShowSearch, searchRef]);\n\n  useEffect(() => {\n    const onEscape = ({ key }) => {\n      if (key === 'Escape') {\n        setShowSearch(false);\n      }\n    };\n\n    document.addEventListener('keydown', onEscape);\n    return () => {\n      document.removeEventListener('keydown', onEscape);\n    };\n  }, [setShowSearch]);\n\n  return (\n    <>\n      <div\n        ref={searchRef}\n        css={css`\n          position: fixed;\n          top: var(--spectrum-global-dimension-size-800);\n          left: 0;\n          right: 0;\n          ${showSearchResults && 'bottom: 0;'}\n          background-color: var(--spectrum-global-color-static-white);\n          z-index: 10;\n\n          @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n            top: var(--spectrum-global-dimension-size-1200);\n          }\n        `}>\n        <div\n          css={css`\n            position: relative;\n            margin: var(--spectrum-global-dimension-size-400) auto;\n            max-width: ${SEARCH_INPUT_WIDTH};\n\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              max-width: calc(100vw - var(--spectrum-global-dimension-size-800));\n            }\n          `}>\n          <form\n            css={css`\n              width: 100%;\n            `}\n            className=\"spectrum-Search\"\n            onSubmit={async (event) => {\n              event.preventDefault();\n\n              await search();\n            }}>\n            <div\n              className={classNames('spectrum-Textfield', { 'is-focused': isFocused })}\n              css={css`\n                min-width: auto;\n                width: 100%;\n              `}>\n              <Magnify className=\"spectrum-Textfield-icon\" />\n              <input\n                ref={inputRef}\n                value={searchQuery}\n                onFocus={() => {\n                  setIsFocused(true);\n                }}\n                onBlur={() => {\n                  setIsFocused(false);\n                }}\n                onChange={async (e) => {\n                  const query = e.target.value;\n                  setSearchQuery(query);\n\n                  if (query.length) {\n                    setShowClear(true);\n\n                    const suggestions = await searchSuggestions(algolia, query, searchIndex, indexAll);\n\n                    if (suggestions?.results?.length) {\n                      const results = [];\n                      suggestions.results.forEach(({ hits }) => {\n                        hits.forEach(({ objectID, url, title, description }) => {\n                          results.push({\n                            objectID,\n                            url,\n                            title,\n                            description\n                          });\n                        });\n                      });\n                      setSearchSuggestionResults(results);\n                    } else {\n                      setSearchSuggestionResults([]);\n                    }\n\n                    setIsSuggestionsOpen(true);\n                  } else {\n                    setShowClear(false);\n                    setIsSuggestionsOpen(false);\n                  }\n                }}\n                aria-label=\"Search\"\n                type=\"search\"\n                placeholder=\"Search\"\n                className=\"spectrum-Textfield-input spectrum-Search-input\"\n                autoComplete=\"off\"\n              />\n            </div>\n            {showClear && (\n              <button\n                css={css`\n                  position: absolute;\n                `}\n                aria-label=\"Clear Search\"\n                type=\"reset\"\n                className=\"spectrum-ClearButton spectrum-Search-clearButton\"\n                onClick={() => {\n                  setSearchQuery('');\n                  inputRef.current.focus();\n                }}>\n                <Cross />\n              </button>\n            )}\n          </form>\n\n          <Popover\n            isOpen={isSuggestionsOpen}\n            css={css`\n              position: absolute;\n              top: var(--spectrum-global-dimension-size-400);\n              width: ${SEARCH_INPUT_WIDTH};\n\n              @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                max-width: calc(100vw - var(--spectrum-global-dimension-size-800));\n              }\n            `}>\n            {searchSuggestionResults.length > 0 ? (\n              <Menu>\n                {searchSuggestionResults.map((searchSuggestion, i) => (\n                  <MenuItem\n                    isHighlighted={i === 0}\n                    key={searchSuggestion.objectID}\n                    href={`${location.origin}${searchSuggestion.url}`}>\n                    <div\n                      css={css`\n                        white-space: nowrap;\n                        text-overflow: ellipsis;\n                        overflow: hidden;\n                      `}>\n                      <strong>{searchSuggestion.title}</strong> - {searchSuggestion.description}\n                    </div>\n                  </MenuItem>\n                ))}\n              </Menu>\n            ) : (\n              <div\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-800);\n                  margin-bottom: var(--spectrum-global-dimension-size-800);\n                `}>\n                <div\n                  css={css`\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    justify-content: center;\n                  `}>\n                  <h4\n                    className=\"spectrum-Heading spectrum-Heading--sizeS\"\n                    css={css`\n                      margin-bottom: var(--spectrum-global-dimension-size-100);\n                    `}>\n                    No Results Found\n                  </h4>\n                  <em>Try another search term</em>\n                </div>\n              </div>\n            )}\n          </Popover>\n        </div>\n\n        {showSearchResults && (\n          <div\n            css={css`\n              display: flex;\n              max-width: ${DESKTOP_SCREEN_WIDTH};\n              margin: auto;\n              height: 100%;\n\n              @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                overflow: auto;\n                flex-wrap: wrap;\n              }\n            `}>\n            <div\n              css={css`\n                display: flex;\n                align-items: flex-start;\n                flex-direction: column;\n                box-sizing: border-box;\n                padding: var(--spectrum-global-dimension-size-200);\n                min-width: ${SIDENAV_WIDTH};\n              `}>\n              <h4\n                className=\"spectrum-Heading spectrum-Heading--sizeXS\"\n                css={css`\n                  margin-bottom: var(--spectrum-global-dimension-size-100);\n                `}>\n                Filter by\n              </h4>\n\n              <div\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-100);\n                  margin-bottom: var(--spectrum-global-dimension-size-1200);\n                  display: flex;\n                  flex-direction: column;\n                  overflow: auto;\n\n                  @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                    margin-bottom: 0;\n                  }\n                `}>\n                {keywordResults.length > 0 ? (\n                  keywordResults.map((keyword, i) => (\n                    <Checkbox\n                      key={i}\n                      isSelected={selectedKeywords.includes(keyword)}\n                      value={keyword}\n                      onChange={(checked) => {\n                        if (checked) {\n                          setSelectedKeyWords((selectedKeywords) => [...selectedKeywords, keyword]);\n                        } else {\n                          setSelectedKeyWords(\n                            selectedKeywords.filter((selectedKeyword) => selectedKeyword !== keyword)\n                          );\n                        }\n                      }}>\n                      {keyword}\n                    </Checkbox>\n                  ))\n                ) : (\n                  <div className=\"spectrum-Body spectrum-Body--sizeS\">No filter options available</div>\n                )}\n              </div>\n            </div>\n\n            <div\n              css={css`\n                height: 100%;\n              `}>\n              <Tabs\n                onFontsReady={() => {\n                  positionSelectedTabIndicator();\n                }}>\n                {searchIndex.map((index, i) => {\n                  const indexName = Object.keys(index)[0];\n                  const indexLabel = index[indexName];\n\n                  const setTabRef = (element) => {\n                    index.tabRef = { current: element };\n                  };\n\n                  return (\n                    <TabsItem\n                      key={i}\n                      ref={setTabRef}\n                      selected={selectedIndex === indexName}\n                      tabIndex={0}\n                      onClick={async () => {\n                        setSelectedIndex(indexName);\n                      }}>\n                      <TabsItemLabel>{indexLabel}</TabsItemLabel>\n                    </TabsItem>\n                  );\n                })}\n\n                <TabsIndicator ref={selectedTabIndicator} />\n              </Tabs>\n\n              {searchResults.length > 0 ? (\n                <div\n                  ref={searchResultsRef}\n                  css={css`\n                    height: calc(\n                      100% - var(--spectrum-global-dimension-size-800) - var(--spectrum-global-dimension-size-800) -\n                        var(--spectrum-global-dimension-size-200)\n                    );\n                    overflow: auto;\n\n                    @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                      height: auto;\n                      overflow: inherit;\n                    }\n                  `}>\n                  {searchResults.map((searchResult) => {\n                    const to = `${location.origin}${searchResult.url}`;\n\n                    return (\n                      <div\n                        css={css`\n                          margin: var(--spectrum-global-dimension-size-300);\n\n                          mark,\n                          em {\n                            background-color: transparent;\n                            color: inherit;\n                            font-weight: 700;\n                            font-style: inherit;\n                          }\n                        `}>\n                        <div\n                          className=\"spectrum-Body spectrum-Body--sizeM\"\n                          css={css`\n                            margin-bottom: var(--spectrum-global-dimension-size-100);\n                          `}>\n                          <AnchorLink to={to}>\n                            <span dangerouslySetInnerHTML={{ __html: searchResult._highlightResult.title.value }} />\n                          </AnchorLink>\n                        </div>\n                        <div\n                          css={css`\n                            font-style: italic;\n                          `}>\n                          <AnchorLink variant=\"secondary\" to={to}>\n                            {to}\n                          </AnchorLink>\n                        </div>\n                        <div\n                          className=\"spectrum-Body spectrum-Body--sizeS\"\n                          css={css`\n                            margin: var(--spectrum-global-dimension-size-100) 0;\n                          `}\n                          dangerouslySetInnerHTML={{ __html: searchResult._highlightResult.description.value }}\n                        />\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div\n                  css={css`\n                    position: absolute;\n                    top: var(--spectrum-global-dimension-size-3600);\n                    height: calc(2 * var(--spectrum-global-dimension-size-1250));\n                    margin-top: calc(-1 * var(--spectrum-global-dimension-size-1250));\n                    text-align: center;\n                    right: 0;\n                    left: 0;\n                    padding: 0 var(--spectrum-global-dimension-size-200);\n\n                    @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                      position: static;\n                      margin: var(--spectrum-global-dimension-size-800) 0;\n                      height: auto;\n                    }\n                  `}>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 104 90\"\n                    css={css`\n                      width: var(--spectrum-global-dimension-size-2400);\n                      height: var(--spectrum-global-dimension-size-1200);\n                      margin-bottom: var(--spectrum-global-dimension-size-300);\n                      fill: var(--spectrum-global-color-static-gray-500);\n                    `}>\n                    <g>\n                      <g>\n                        <path d=\"M37.5,69A24.54,24.54,0,1,0,17,57.92l0,0L1.46,73.52A5,5,0,0,0,5,82.05H5a5,5,0,0,0,3.54-1.47L24.06,65l0,0A24.33,24.33,0,0,0,37.5,69Zm0-46A21.5,21.5,0,1,1,16,44.5,21.52,21.52,0,0,1,37.5,23ZM6.41,78.46A2,2,0,0,1,5,79.05H5a2,2,0,0,1-1.42-3.42L18.83,60.34a25.21,25.21,0,0,0,2.83,2.83Z\"></path>\n                        <path d=\"M28.67,53.33a1.51,1.51,0,0,0,1.06.44,1.49,1.49,0,0,0,1.06-.44l6.71-6.71,6.71,6.71a1.5,1.5,0,0,0,2.12,0,1.49,1.49,0,0,0,0-2.12L39.62,44.5l6.71-6.71a1.49,1.49,0,0,0,0-2.12,1.51,1.51,0,0,0-2.12,0L37.5,42.38l-6.71-6.71a1.5,1.5,0,0,0-2.12,2.12l6.71,6.71-6.71,6.71A1.51,1.51,0,0,0,28.67,53.33Z\"></path>\n                        <path d=\"M102.5,31a1.5,1.5,0,0,0-1.5,1.5V86.17a.83.83,0,0,1-.83.83H38.83a.83.83,0,0,1-.83-.83V73.5a1.5,1.5,0,0,0-3,0V86.17A3.84,3.84,0,0,0,38.83,90h61.34A3.84,3.84,0,0,0,104,86.17V32.5A1.5,1.5,0,0,0,102.5,31Z\"></path>\n                        <path d=\"M37.5,17A1.5,1.5,0,0,0,39,15.5V3.83A.83.83,0,0,1,39.83,3H75V26.5A1.5,1.5,0,0,0,76.5,28h25.55a1.5,1.5,0,0,0,1-2.57L77.55.43a1.43,1.43,0,0,0-.49-.32A1.41,1.41,0,0,0,76.52,0H39.83A3.84,3.84,0,0,0,36,3.83V15.5A1.5,1.5,0,0,0,37.5,17ZM78,5.07,98.37,25H78Z\"></path>\n                      </g>\n                    </g>\n                  </svg>\n                  <h3 className=\"spectrum-Heading spectrum-Heading--light spectrum-Heading--sizeM\">\n                    Sorry, we couldn't find any results for <strong>{searchQuery}</strong>\n                  </h3>\n                  <p\n                    className=\"spectrum-Body spectrum-Body--S\"\n                    css={css`\n                      margin-top: var(--spectrum-global-dimension-size-100);\n                    `}>\n                    Make sure all the words are spelled correctly or try to refine your keywords.\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {!showSearchResults && (\n        <div\n          css={css`\n            position: fixed;\n            z-index: 1;\n            top: calc(var(--spectrum-global-dimension-size-1200) + var(--spectrum-global-dimension-size-800));\n            bottom: 0;\n            left: 0;\n            right: 0;\n            background-color: rgba(0, 0, 0, 0.4);\n            pointer-events: none;\n          `}\n        />\n      )}\n    </>\n  );\n};\n\nSearch.propTypes = {\n  algolia: PropTypes.object,\n  searchIndex: PropTypes.array,\n  indexAll: PropTypes.array,\n  showSearch: PropTypes.bool,\n  setShowSearch: PropTypes.func,\n  searchButtonId: PropTypes.string\n};\n\nexport { Search };\n"],"sourceRoot":""}