{"version":3,"sources":["webpack://uxp-photoshop-documentation/./node_modules/@adobe/gatsby-theme-aio/src/components/Hero/index.js"],"names":["setImageLoading","child","props","mdxType","cloneElement","loading","HeroButtons","buttons","variants","quiets","className","css","Children","children","item","i","variant","quiet","link","getElementChild","key","A","isQuiet","href","HeroImage","image","styles","cloneChildren","HeroTexts","texts","Object","keys","filter","startsWith","map","textKey","HeroHeading","heading","Hero","background","theme","icon","width","LARGE_SCREEN_WIDTH","height","isVariant"],"mappings":"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","file":"5e65052d-f358cf9a028474470132.js","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { cloneElement, Children } from 'react';\nimport { css } from '@emotion/react';\nimport { AnchorButton } from '../AnchorButton';\nimport '@spectrum-css/typography';\nimport PropTypes from 'prop-types';\nimport { getElementChild, cloneChildren, LARGE_SCREEN_WIDTH } from '../../utils';\n\nconst setImageLoading = (child) => {\n  if (child?.props?.mdxType === 'img') {\n    return cloneElement(child, {\n      loading: 'eager'\n    });\n  }\n\n  return child;\n};\n\nconst HeroButtons = ({ buttons, variants = ['cta', 'primary'], quiets = [true, true], className }) =>\n  buttons ? (\n    <div>\n      <div\n        className={className}\n        css={css`\n          display: flex;\n          --gap: var(--spectrum-global-dimension-size-200);\n          flex-wrap: wrap;\n          margin: calc(-1 * var(--gap)) 0 0 calc(-1 * var(--gap));\n          width: calc(100% + var(--gap));\n        `}>\n        {Children.map(buttons.props.children, (item, i) => {\n          let variant = variants[0];\n          let quiet = quiets[0];\n\n          if (i > 0) {\n            variant = variants[1];\n            quiet = quiets[1];\n          }\n\n          const link = getElementChild(item);\n\n          return (\n            <div\n              key={i}\n              css={css`\n                margin: var(--gap) 0 0 var(--gap);\n              `}>\n              <AnchorButton isQuiet={quiet} href={link.props.href} variant={variant}>\n                {link.props.children}\n              </AnchorButton>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  ) : null;\n\nconst HeroImage = ({ image, styles }) =>\n  image\n    ? cloneElement(image, {\n        children: cloneChildren(image.props.children, setImageLoading),\n        css: css`\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          height: 100%;\n          width: 100%;\n          margin-top: 0;\n          ${styles}\n\n          .gatsby-resp-image-wrapper {\n            max-width: none !important;\n            width: 100% !important;\n            height: 100% !important;\n          }\n\n          .gatsby-resp-image-image {\n            object-fit: cover;\n          }\n        `\n      })\n    : null;\n\nconst HeroTexts = ({ texts }) => {\n  const textKeys = Object.keys(texts).filter((key) => key.startsWith('text'));\n  return textKeys.map((textKey) =>\n    cloneElement(texts[textKey], {\n      className: 'spectrum-Body spectrum-Body--sizeL',\n      css: css`\n        &.spectrum-Body--sizeL {\n          margin-top: 0 !important;\n\n          &:last-of-type {\n            margin-bottom: 0 !important;\n          }\n        }\n      `\n    })\n  );\n};\n\nconst HeroHeading = ({ heading, variant }) =>\n  heading\n    ? cloneElement(heading, {\n        className:\n          variant === 'default' ? 'spectrum-Heading--sizeXL' : 'spectrum-Heading--sizeXXL spectrum-Heading--serif',\n        css: css`\n          margin-top: 0;\n          margin-bottom: var(--spectrum-global-dimension-size-200);\n\n          & + p {\n            margin-bottom: var(--spectrum-global-dimension-size-200);\n          }\n        `\n      })\n    : null;\n\nconst Hero = ({\n  background,\n  theme = 'dark',\n  heading,\n  image,\n  icon,\n  buttons,\n  variant = 'default',\n  width = 'var(--spectrum-global-dimension-static-grid-fixed-max-width)',\n  ...props\n}) => {\n  if (!variant || variant === 'default') {\n    return (\n      <section\n        className={`spectrum--${theme}`}\n        css={css`\n          position: relative;\n          height: var(--spectrum-global-dimension-size-3400);\n          margin-bottom: var(--spectrum-global-dimension-size-400);\n          background-color: ${background ?? 'rgb( 29, 125, 238)'};\n          width: 100%;\n          display: flex;\n\n          @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n            overflow: auto;\n            height: 100vh;\n          }\n        `}>\n        <HeroImage image={image} styles={`position: absolute;`} />\n        <div\n          css={css`\n            margin: auto;\n            display: flex;\n            position: relative;\n            height: 100%;\n            max-width: ${width};\n            flex-direction: row;\n            width: 100%;\n            align-items: center;\n\n            & > p {\n              margin-top: 0 !important;\n            }\n          `}>\n          <div\n            css={css`\n              width: calc(5 * 100% / 12);\n              position: absolute;\n              display: flex;\n              flex-direction: column;\n\n              & > p {\n                margin-top: var(--spectrum-global-dimension-size-225) !important;\n                margin-bottom: 0 !important;\n              }\n\n              @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                width: auto;\n                padding: 0 var(--spectrum-global-dimension-size-400);\n              }\n            `}>\n            <HeroHeading heading={heading} variant={variant} />\n\n            <HeroTexts texts={props} />\n          </div>\n        </div>\n      </section>\n    );\n  } else {\n    const height = 'calc(var(--spectrum-global-dimension-size-6000) + var(--spectrum-global-dimension-size-250))';\n\n    if (variant === 'fullwidth') {\n      return (\n        <section\n          className={`spectrum--${theme}`}\n          css={css`\n            position: relative;\n            width: 100%;\n            height: ${height};\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n\n            @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n              overflow: auto;\n              height: 100vh;\n\n              .spectrum-Heading--sizeXXL {\n                font-size: var(--spectrum-alias-heading-xl-text-size);\n              }\n            }\n          `}>\n          <HeroImage image={image} />\n\n          <div\n            css={css`\n              height: 100%;\n              position: absolute;\n              top: 0;\n              width: 100%;\n              box-sizing: border-box;\n              padding: 0 calc(var(--spectrum-global-dimension-size-3600) + var(--spectrum-global-dimension-size-125));\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n              justify-content: center;\n              text-align: center;\n\n              @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                padding: 0 var(--spectrum-global-dimension-size-400);\n              }\n            `}>\n            <HeroHeading heading={heading} variant={variant} />\n\n            <HeroTexts texts={props} />\n\n            <HeroButtons\n              buttons={buttons}\n              variants={['cta', 'overBackground']}\n              css={css`\n                margin-top: var(--spectrum-global-dimension-size-400);\n              `}\n            />\n          </div>\n        </section>\n      );\n    } else if (variant === 'halfwidth') {\n      return (\n        <section\n          className={`spectrum--lightest`}\n          css={css`\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n            width: 100%;\n            height: ${height};\n            overflow: hidden;\n\n            @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n          `}>\n          <div\n            css={css`\n              display: flex;\n              height: 100%;\n              justify-content: center;\n            `}>\n            <div\n              css={css`\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                width: calc(5 * 100% / 12);\n                margin-left: var(--spectrum-global-dimension-size-800);\n                margin-right: var(--spectrum-global-dimension-size-400);\n\n                @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                  width: 100%;\n                  margin: 0;\n                }\n              `}>\n              {icon &&\n                cloneElement(icon, {\n                  children: cloneChildren(icon.props.children, setImageLoading),\n                  css: css`\n                    height: var(--spectrum-global-dimension-size-600);\n                    width: var(--spectrum-global-dimension-size-600);\n                    margin-top: 0 !important;\n                    margin-bottom: var(--spectrum-global-dimension-size-300) !important;\n\n                    .gatsby-resp-image-wrapper {\n                      max-width: none !important;\n                      width: 100% !important;\n                      height: 100% !important;\n                    }\n\n                    .gatsby-resp-image-image {\n                      height: 100%;\n                      object-fit: contain;\n                    }\n                  `\n                })}\n\n              <HeroHeading heading={heading} isVariant />\n\n              <HeroTexts texts={props} />\n\n              <HeroButtons\n                buttons={buttons}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-400);\n                `}\n              />\n            </div>\n            <div\n              css={css`\n                flex: 1;\n\n                @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                  display: none;\n                }\n              `}>\n              <HeroImage image={image} />\n            </div>\n          </div>\n        </section>\n      );\n    }\n  }\n};\n\nHero.propTypes = {\n  background: PropTypes.string,\n  heading: PropTypes.element,\n  text: PropTypes.element,\n  image: PropTypes.element,\n  icon: PropTypes.element,\n  buttons: PropTypes.element,\n  variant: PropTypes.string,\n  width: PropTypes.string,\n  theme: PropTypes.string\n};\n\nHeroButtons.propTypes = {\n  buttons: PropTypes.element,\n  variants: PropTypes.array,\n  quiets: PropTypes.array\n};\n\nHeroImage.propTypes = {\n  image: PropTypes.element\n};\n\nexport { Hero, HeroImage, HeroButtons };\n"],"sourceRoot":""}