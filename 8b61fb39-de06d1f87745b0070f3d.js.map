{"version":3,"sources":["webpack://uxp-photoshop-documentation/./node_modules/@adobe/gatsby-theme-aio/src/components/TextBlock/index.js"],"names":["counter","2","3","4","alignMapping","Icons","icons","isCentered","cloneElement","css","Texts","texts","Object","keys","filter","key","startsWith","map","textKey","Links","links","TABLET_SCREEN_WIDTH","YouTubeVideo","video","youTubeId","link","getElementChild","url","URL","props","href","hostname","URLSearchParams","search","get","pathname","slice","layoutColumns","TextBlock","className","heading","buttons","image","theme","width","initColumns","parseFloat","toFixed","columns","useState","useEffect","blockWidth","extraMargin","classNames","replace","children","aria-hidden","isReversed","slots","endsWith","DESKTOP_SCREEN_WIDTH"],"mappings":"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","file":"8b61fb39-de06d1f87745b0070f3d.js","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { cloneElement, useEffect, useState } from 'react';\nimport { css } from '@emotion/react';\nimport { HeroButtons } from '../Hero';\nimport '@spectrum-css/typography';\nimport PropTypes from 'prop-types';\nimport { YouTube } from 'mdx-embed';\nimport { getElementChild, layoutColumns, DESKTOP_SCREEN_WIDTH, TABLET_SCREEN_WIDTH } from '../../utils';\nimport classNames from 'classnames';\n\nconst counter = {\n  2: 0,\n  3: 0,\n  4: 0\n};\nconst alignMapping = ['margin-left: 0;', 'margin-right: 0;'];\n\nconst Icons = ({ icons, isCentered }) =>\n  icons\n    ? cloneElement(icons, {\n        css: css`\n          list-style: none;\n          padding: 0;\n          margin-bottom: var(--spectrum-global-dimension-size-400) !important;\n          display: flex;\n          justify-content: ${isCentered ? 'center' : 'flex-start'};\n\n          & li {\n            display: flex;\n            border-right: 1px solid var(--spectrum-global-color-gray-300);\n            height: var(--spectrum-global-dimension-size-600);\n            margin-right: var(--spectrum-global-dimension-size-150);\n          }\n\n          & li:last-of-type {\n            padding-right: 0;\n            border-right: none;\n          }\n\n          .gatsby-resp-image-wrapper {\n            position: relative;\n            width: var(--spectrum-global-dimension-size-800) !important;\n          }\n\n          .gatsby-resp-image-image {\n            position: absolute;\n            top: 0;\n            left: 0;\n            height: 100%;\n            object-fit: contain;\n          }\n        `\n      })\n    : null;\n\nconst Texts = ({ texts }) => {\n  const textKeys = Object.keys(texts).filter((key) => key.startsWith('text'));\n  return textKeys.map((textKey) => texts[textKey]);\n};\n\nconst Links = ({ links, isCentered }) =>\n  links\n    ? cloneElement(links, {\n        css: css`\n          list-style: none;\n          padding: 0;\n          display: flex;\n          justify-content: ${isCentered ? 'center' : 'flex-start'};\n          margin-top: ${isCentered\n            ? 'var(--spectrum-global-dimension-size-200) !important;'\n            : 'var(--spectrum-global-dimension-size-600) !important;'};\n\n          & li {\n            display: flex;\n            align-items: center;\n            height: var(--spectrum-global-dimension-size-400);\n          }\n\n          & li a {\n            white-space: nowrap;\n            margin-right: var(--spectrum-global-dimension-size-600);\n          }\n\n          & li:last-of-type a {\n            margin-right: 0;\n          }\n\n          .gatsby-resp-image-wrapper {\n            max-width: none !important;\n            width: 100% !important;\n            height: 100% !important;\n          }\n\n          .gatsby-resp-image-wrapper {\n            width: var(--spectrum-global-dimension-size-400) !important;\n            margin-left: 0 !important;\n            margin-right: var(--spectrum-global-dimension-size-150) !important;\n          }\n\n          .gatsby-resp-image-image {\n            object-fit: contain;\n          }\n\n          @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n            flex-direction: column;\n            align-items: ${isCentered ? 'center' : 'left'};\n\n            li {\n              margin-top: var(--spectrum-global-dimension-size-100);\n            }\n\n            li a {\n              margin-right: 0;\n            }\n          }\n        `\n      })\n    : null;\n\nconst YouTubeVideo = ({ video }) => {\n  let youTubeId = null;\n  if (video) {\n    const link = getElementChild(video);\n    let url = new URL(link.props.href);\n    if (url.hostname.startsWith('youtube.com') || url.hostname.startsWith('www.youtube.com')) {\n      const queryParams = new URLSearchParams(url.search);\n      youTubeId = queryParams.get('v');\n    } else if (url.hostname.startsWith('youtu.be')) {\n      youTubeId = url.pathname.slice(1);\n    }\n  }\n\n  return youTubeId ? (\n    <div\n      css={css`\n        & {\n          display: inline;\n          width: ${layoutColumns(6)};\n          box-sizing: border-box;\n          padding: var(--spectrum-global-dimension-size-200);\n\n          @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n            display: block;\n            width: 100%;\n          }\n        }\n      `}>\n      <YouTube youTubeId={youTubeId} />\n    </div>\n  ) : null;\n};\n\nconst TextBlock = ({\n  className,\n  heading,\n  links,\n  buttons,\n  icons,\n  image,\n  video,\n  theme = 'lightest',\n  width = '100%',\n  isCentered = false,\n  ...props\n}) => {\n  let initColumns = 100 / parseFloat(width);\n\n  if (width === '33%') {\n    width = `${(100 / 3).toFixed(2)}%`;\n    initColumns = 3;\n  }\n\n  const [columns] = useState(initColumns);\n\n  useEffect(() => {\n    return () => {\n      if (typeof counter[columns] !== 'undefined') {\n        counter[columns]--;\n      }\n    };\n  }, [columns]);\n\n  if (isCentered) {\n    let blockWidth = '';\n    let extraMargin = '';\n\n    if (typeof counter[columns] !== 'undefined') {\n      counter[columns]++;\n    }\n\n    if (columns === 1) {\n      blockWidth = `max-width: ${layoutColumns(6)};`;\n    } else if (columns > 3) {\n      blockWidth = 'max-width: var(--spectrum-global-dimension-size-3600);';\n    } else {\n      blockWidth = 'max-width: var(--spectrum-global-dimension-size-4600);';\n      extraMargin = alignMapping[counter[columns] % columns];\n    }\n\n    return (\n      <>\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            display: table-cell;\n            width: ${width.replace('%', 'vw')};\n            background: var(--spectrum-global-color-gray-100);\n            padding: var(--spectrum-global-dimension-size-1000) 0;\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              display: block;\n              width: 100%;\n            }\n          `}>\n          <div\n            css={css`\n              ${blockWidth}\n              padding: 0 var(--spectrum-global-dimension-size-400);\n              margin: auto;\n              ${extraMargin}\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                max-width: none;\n                margin: auto;\n              }\n            `}>\n            <Icons icons={icons} isCentered={isCentered} />\n\n            {image &&\n              cloneElement(image, {\n                css: css`\n                  height: var(--spectrum-global-dimension-size-1000);\n                  margin-top: 0;\n                  margin-bottom: var(--spectrum-global-dimension-size-300);\n\n                  .gatsby-resp-image-wrapper {\n                    position: relative;\n                    max-width: none !important;\n                    width: 100% !important;\n                    height: 100% !important;\n                  }\n\n                  .gatsby-resp-image-image {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    height: 100%;\n                    object-fit: contain;\n                  }\n                `\n              })}\n\n            {heading && (\n              <h3\n                className=\"spectrum-Heading spectrum-Heading--sizeM\"\n                css={css`\n                  margin-bottom: var(--spectrum-global-dimension-size-200) !important;\n\n                  & ~ p {\n                    margin-top: 0;\n                    margin-bottom: 0 !important;\n                  }\n                `}>\n                {heading.props.children}\n              </h3>\n            )}\n\n            <Texts texts={props} />\n\n            <HeroButtons\n              buttons={buttons}\n              css={css`\n                margin-top: var(--spectrum-global-dimension-size-150);\n                margin-bottom: var(--spectrum-global-dimension-size-150);\n                justify-content: center;\n              `}\n            />\n\n            <Links links={links} isCentered={isCentered} />\n\n            {video && (\n              <div\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-400);\n                `}>\n                <YouTubeVideo video={video} />\n              </div>\n            )}\n          </div>\n        </section>\n        {typeof counter[columns] !== 'undefined' && counter[columns] % columns === 0 ? (\n          <div aria-hidden=\"true\" />\n        ) : null}\n      </>\n    );\n  } else {\n    const isReversed = props.slots.endsWith('image') || props.slots.endsWith('video');\n\n    return (\n      <section\n        className={classNames(className, `spectrum--${theme}`)}\n        css={css`\n          width: 100%;\n          background: var(--spectrum-global-color-gray-100);\n        `}>\n        <div\n          css={css`\n            width: ${DESKTOP_SCREEN_WIDTH};\n            box-sizing: border-box;\n            margin: auto;\n            padding: var(--spectrum-global-dimension-size-1000) 0;\n\n            @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n              width: 100%;\n\n              & > div {\n                flex-direction: column !important;\n              }\n            }\n          `}>\n          <div\n            css={css`\n              display: flex;\n              align-items: center;\n              flex-direction: ${isReversed ? 'row-reverse' : 'row'};\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                flex-direction: column;\n              }\n            `}>\n            {image &&\n              cloneElement(image, {\n                css: css`\n                  display: flex;\n                  align-items: center;\n                  justify-content: center;\n                  width: 50%;\n                  height: calc(var(--spectrum-global-dimension-size-4600) - var(--spectrum-global-dimension-size-225));\n                  box-sizing: border-box;\n                  padding: var(--spectrum-global-dimension-size-200);\n                  margin-top: 0;\n\n                  .gatsby-resp-image-wrapper {\n                    max-width: none !important;\n                    width: 100% !important;\n                    height: 100% !important;\n                  }\n\n                  .gatsby-resp-image-image {\n                    object-fit: contain;\n                  }\n\n                  @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                    height: auto;\n                    width: 100%;\n                  }\n                `\n              })}\n\n            <YouTubeVideo video={video} />\n\n            <div\n              css={css`\n                width: 50%;\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                text-align: left;\n                box-sizing: border-box;\n                padding: 0 var(--spectrum-global-dimension-size-400);\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  width: 100%;\n                  margin: var(--spectrum-global-dimension-size-400) 0;\n                }\n              `}>\n              <Icons icons={icons} isCentered={isCentered} />\n\n              {heading && (\n                <h3\n                  className=\"spectrum-Heading spectrum-Heading--sizeM\"\n                  css={css`\n                    margin-top: 0 !important;\n                    margin-bottom: var(--spectrum-global-dimension-size-200) !important;\n\n                    & + p {\n                      margin-top: 0 !important;\n                    }\n                  `}>\n                  {heading.props.children}\n                </h3>\n              )}\n\n              <Texts texts={props} />\n\n              <HeroButtons\n                buttons={buttons}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-200);\n                `}\n              />\n\n              <Links links={links} isCentered={isCentered} />\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n};\n\nTextBlock.propTypes = {\n  heading: PropTypes.element,\n  links: PropTypes.element,\n  icons: PropTypes.element,\n  buttons: PropTypes.element,\n  image: PropTypes.element,\n  video: PropTypes.element,\n  theme: PropTypes.string,\n  width: PropTypes.oneOf(['100%', '50%', '33%', '25%']),\n  isCentered: PropTypes.bool\n};\n\nexport { TextBlock };\n"],"sourceRoot":""}