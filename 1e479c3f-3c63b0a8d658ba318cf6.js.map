{"version":3,"file":"1e479c3f-3c63b0a8d658ba318cf6.js","mappings":"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","sources":["webpack://uxp-photoshop-documentation/./node_modules/@adobe/gatsby-theme-aio/src/components/VideoCarousel/index.js"],"sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { useEffect, useState } from \"react\";\nimport { css } from \"@emotion/react\";\nimport \"@spectrum-css/typography\";\nimport PropTypes from \"prop-types\";\nimport {\n    TABLET_SCREEN_WIDTH,\n    layoutColumns,\n    MOBILE_SCREEN_WIDTH,\n} from \"@adobe/gatsby-theme-aio/src/utils\";\nimport { DESKTOP_SCREEN_WIDTH } from \"@adobe/gatsby-theme-aio/src/utils\";\n\nimport {\n    HeroButtons\n} from \"../Hero\"\nimport classNames from \"classnames\";\nimport { Swiper, SwiperSlide, } from \"swiper/react\";\nimport SwiperCore, { Pagination, Autoplay, Navigation } from \"swiper\";\nimport \"swiper/css\";\nimport \"swiper/css/pagination\";\nimport \"swiper/css/navigation\";\n\nSwiperCore.use([Autoplay, Pagination, Navigation]);\n\nconst smallMobileView = \"375px\";\nconst MIN_MOBILE_SCREEN_WIDTH = \"767px\"\n\nconst Texts = ({ texts, index }) => {\n    const definedTextKeys = texts.slots\n        .split(',').map(key => key.trim())\n        .filter((key) => key.startsWith('text'));\n    return definedTextKeys.map((data) => texts[`${data}${index}`]);\n};\n\nconst SwiperContent = ({\n    textKeys,\n    heading,\n    buttons,\n    props,\n    index,\n    theme,\n    isCenter,\n    videos,\n    position\n}) => {\n\n    return (\n        <div\n            className={classNames(`spectrum--${theme}`)}\n            css={css`\n                display: flex;\n                gap:5%;\n                margin-bottom: var(--spectrum-global-dimension-size-500);\n                flex-direction: ${position === \"left\" ? \"row\" : \"row-reverse\"};\n                \n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                flex-direction: column;\n                max-width: calc(${layoutColumns(6)}) !important;\n                gap:25px;\n                }\n\n                @media screen and (max-width: ${MIN_MOBILE_SCREEN_WIDTH}) {\n                max-width: calc(${layoutColumns(3.5)}) !important;\n                gap:25px;\n                }        \n            `}\n        >\n            <div\n                css={css`\n                    flex: 1;\n                    justify-content: center;\n                    width:100%;\n                    padding-right:5%;\n                    @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n                    margin: auto;\n                    }\n\n                    @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                    margin: 0;\n                    max-width: calc(${layoutColumns(3.5)}) !important;\n                    }\n\n                    @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                    max-width: calc(${layoutColumns(6)}) !important;\n                    margin: 0;\n                    }\n                    `}\n            >\n                {videos.length &&\n                    <video name=\"media3\" loop=\"true\" muted=\"true\" autoPlay preload=\"metadata\" playsInline css={css`\n                            height:auto;\n                            width:570px;\n                        `}>\n                        <source src={videos[index]} />\n                    </video>}\n            </div>\n\n            {textKeys.length > 0 || heading || buttons ? (\n                <div\n                    css={css`\n                        padding-left:5%;\n                        text-align: left;\n                        flex: 1;\n                        display: ${isCenter ? \"flex\" : \"block\"};\n                        flex-direction:  ${isCenter && \"column \"};\n                        height:  ${isCenter && \"auto\"};\n                        justify-content:  ${isCenter && \"center\"};\n                        padding-bottom: var(--spectrum-global-dimension-size-200);\n                        @media only screen and (min-width: ${smallMobileView}) and(max-width:${MOBILE_SCREEN_WIDTH}) {\n                        margin: 0;\n                        text-align: center !important;\n                        max-width: calc(${layoutColumns(3.5)}) !important;\n                        padding-left:  var(--spectrum-global-dimension-size-100) !important;\n                        }\n                `}\n                >\n                    {heading && (\n                        <h3\n                            className=\"spectrum-Heading--sizeL\"\n                            css={css`\n                                @media only screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                                font-size: 27px !important;\n                                }\n                                @media only screen and (max-width: ${MIN_MOBILE_SCREEN_WIDTH}) {\n                                font-size: 22px !important;\n                                }\n                                `\n                            }>\n                            {heading.props.children}\n                        </h3>\n                    )}\n                    {textKeys.length > 0 ?\n                        <div\n                            className=\"textWrapper\"\n                            css={css`\n                                @media only screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                                &>h3{\n                                    font-size: var(--spectrum-alias-heading-xxs-text-size) !important;\n\n                                }\n                                }`\n                            }\n                        >\n                            <Texts texts={props} index={index} />\n                        </div>\n                        : null}\n                    {buttons ? (\n                        <div\n                            css={css`\n                                margin-top: var(--spectrum-global-dimension-size-200);\n\n                                @media only screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                                    div:first-child{\n                                    justify-content:center !important;\n                                    }\n                                }\n                            `}\n                        >\n                            <HeroButtons buttons={buttons} />\n                        </div>\n                    ) : null}\n                </div>\n            ) : null}\n        </div>\n    );\n};\n\nconst VideoCarousel = ({\n    className,\n    theme = \"dark\",\n    swiperSpeed = 600,\n    delay = 2500,\n    enableNavigation = false,\n    variant = \"fullWidth\",\n    bulletActiveClass = \"swiper-pagination-bullet-active\",\n    bulletClass = \"swiper-pagination-bullet\",\n    navigationPre = \"swiper-button-prev\",\n    navigationNext = \"swiper-button-next\",\n    isCenter = false,\n    videos = [],\n    position = \"left\",\n    navigationIconColor = \"black\",\n    ...props\n}) => {\n    const [duration, setDuration] = useState([]);\n\n    const propKeys = Object.keys(props);\n    let carouselProps = propKeys.filter((key) => key.startsWith(\"heading\"));\n\n    carouselProps = carouselProps.map((data, index) => {\n        return {\n            heading: props[data],\n            buttons: props[`buttons${index}`],\n        };\n    });\n\n    const getVideoDurations = async (videoUrl) => {\n        const durations = [];\n        for (let i = 0; i < videoUrl?.length; i++) {\n            const url = videoUrl[i];\n            const video = document.createElement('video');\n            video.src = url;\n\n            await new Promise(resolve => {\n                video.onloadedmetadata = () => {\n                    durations[i] = video.duration * 1000;\n                    resolve();\n                };\n            });\n        }\n        return durations;\n    };\n\n    async function videoDurationArr() {\n        let duration1 = await getVideoDurations(videos);\n        setDuration(duration1)\n    }\n\n    useEffect(() => {\n        videoDurationArr()\n    }, [])\n\n    const textKeys = props.slots?.split(\",\")?.filter((key) => key.trim().startsWith(\"text\"));\n\n    if (videos?.length && !duration.length) return <></>\n    if (variant === \"halfWidth\") {\n        return (\n            <section\n                className={classNames(className, `spectrum--${theme}`)}\n                css={css`\n                    position: relative;\n                    z-index: 0;\n                    background: var(--spectrum-global-color-gray-100);\n                    padding: var(--spectrum-global-dimension-size-600) 0 var(--spectrum-global-dimension-size-600) 0;`}\n                role=\"button\"\n                tabindex={0}\n                onKeyDown={(e) => {\n                    if (e.key === \"ArrowRight\") {\n                        const swiperSlide = document.querySelector('.swiper').swiper;\n                        swiperSlide.slideNext();\n                    }\n                    if (e.key === \"ArrowLeft\") {\n                        const swiper = document.querySelector('.swiper').swiper;\n                        swiper.slidePrev();\n                    }\n                }}\n            >\n                <div\n                    css={css`\n                            max-width: calc(${layoutColumns(10)});\n                            margin: auto;\n                            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                                max-width: calc(${layoutColumns(2.75)}) !important;\n                            }\n                            @media screen and (min-width: ${MOBILE_SCREEN_WIDTH})  and (max-width: ${TABLET_SCREEN_WIDTH})  {\n                                padding-bottom: 0;\n                                margin-top: 0;\n                                max-width: calc(${layoutColumns(6)}) !important;\n                            }\n                            `}\n                >\n                    <Swiper\n                        speed={swiperSpeed}\n                        slidesPerView={\"auto\"}\n                        autoplay={{\n                            delay,\n                        }}\n                        pagination={{\n                            bulletActiveClass,\n                            bulletClass,\n                            clickable: true,\n\n                        }}\n                        navigation={{\n                            nextEl: `.${navigationNext}`,\n                            prevEl: `.${navigationPre}`,\n                        }}\n                    >\n                        {carouselProps.map((data, index) => {\n                            return (\n                                <SwiperSlide key={index} {...(videos?.length && duration[index] ? { \"data-swiper-autoplay\": `${duration[index]}` } : {})} >\n                                    <SwiperContent\n                                        textKeys={textKeys}\n                                        heading={data.heading}\n                                        buttons={data.buttons}\n                                        props={props}\n                                        index={index}\n                                        theme={theme}\n                                        videos={videos}\n                                        isCenter={isCenter}\n                                        position={position}\n                                    />\n                                    {enableNavigation ? (\n                                        <>\n                                            <div css={css`color:${navigationIconColor}`} className={navigationPre}></div>\n                                            <div css={css`color:${navigationIconColor}`} className={navigationNext} ></div>\n                                        </>\n                                    ) : null}\n                                </SwiperSlide>\n                            );\n                        })}\n                    </Swiper>\n                </div>\n            </section>\n        );\n    }\n    else if (variant === 'fullWidth') {\n        return (\n            <section\n                className={classNames(className, `spectrum--${theme}`)}\n                css={css`\n                    position: relative;\n                    z-index: 0;\n                    background: var(--spectrum-global-color-gray-100);\n                    padding: var(--spectrum-global-dimension-size-600) 0 var(--spectrum-global-dimension-size-200) 0;\n                `}\n                role=\"button\"\n                tabindex={0}\n                onKeyDown={(e) => {\n                    if (e.key === \"ArrowRight\") {\n                        const swiper = document.querySelector('.swiper').swiper;\n                        swiper.slideNext();\n                    }\n                    if (e.key === \"ArrowLeft\") {\n                        const swiper = document.querySelector('.swiper').swiper;\n                        swiper.slidePrev();\n                    }\n                }}\n            >\n                <Swiper\n                    speed={swiperSpeed}\n                    slidesPerView={\"auto\"}\n                    autoplay={{\n                        delay,\n                    }}\n                    pagination={{\n                        bulletActiveClass,\n                        bulletClass,\n                        clickable: true,\n                    }}\n                    navigation={{\n                        nextEl: `.${navigationNext}`,\n                        prevEl: `.${navigationPre}`,\n                    }}\n                >\n                    {carouselProps.map((data, index) => {\n                        return (\n                            <SwiperSlide key={index} {...(videos?.length && duration[index] ? { \"data-swiper-autoplay\": `${duration[index]}` } : {})}>\n                                <div css={css`\n                                        width:100%;\n                                        @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                                            width:100% !important;\n                                        }\n                                `} >\n                                    <div\n                                        css={css`\n                                            max-width: calc(${layoutColumns(12)});\n                                            margin: auto;\n\n                                            @media screen and (min-width: ${MOBILE_SCREEN_WIDTH})  and (max-width: ${TABLET_SCREEN_WIDTH})  {\n                                                max-width: calc(${layoutColumns(6)});\n\n                                            }\n                                    `}>\n                                        <SwiperContent\n                                            textKeys={textKeys}\n                                            heading={data.heading}\n                                            buttons={data.buttons}\n                                            props={props}\n                                            videos={videos}\n                                            index={index}\n                                            theme={theme}\n                                            isCenter={isCenter}\n                                            position={position}\n                                        />\n                                        {enableNavigation ? (\n                                            <div >\n                                                <div css={css`color:${navigationIconColor}`} className={navigationPre}></div>\n                                                <div css={css`color:${navigationIconColor}`} className={navigationNext} ></div>\n                                            </div>\n                                        ) : null}\n                                    </div>\n                                </div>\n                            </SwiperSlide>\n                        );\n                    })}\n                </Swiper>\n            </section>\n        )\n    }\n};\n\nVideoCarousel.propTypes = {\n    className: PropTypes.string,\n    theme: PropTypes.oneOf([\"light\", \"dark\", \"lightest\"]),\n    swiperSpeed: PropTypes.number,\n    delay: PropTypes.number,\n    enableNavigation: PropTypes.bool,\n    slideTheme: PropTypes.oneOf([\"light\", \"dark\"]),\n    bulletActiveClass: PropTypes.string,\n    bulletClass: PropTypes.string,\n    navigationNext: PropTypes.string,\n    navigationPre: PropTypes.string,\n    isCenter: PropTypes.bool,\n    variant: PropTypes.string,\n    videos: PropTypes.array,\n    navigationIconColor: PropTypes.string\n};\n\nexport { VideoCarousel };"],"names":["SwiperCore","use","Autoplay","Pagination","Navigation","MIN_MOBILE_SCREEN_WIDTH","Texts","_ref4","texts","index","slots","split","map","key","trim","filter","startsWith","data","_ref3","name","styles","SwiperContent","_ref5","textKeys","heading","buttons","props","theme","isCenter","videos","position","___EmotionJSX","className","classNames","css","TABLET_SCREEN_WIDTH","layoutColumns","DESKTOP_SCREEN_WIDTH","MOBILE_SCREEN_WIDTH","length","loop","muted","autoPlay","preload","playsInline","src","children","HeroButtons","_ref","_ref2","VideoCarousel","_ref6","_props$slots","_props$slots$split","swiperSpeed","delay","enableNavigation","variant","bulletActiveClass","bulletClass","navigationPre","navigationNext","navigationIconColor","_objectWithoutProperties","_excluded","duration","setDuration","useState","carouselProps","Object","keys","async","videoDurationArr","duration1","durations","i","videoUrl","url","video","document","createElement","Promise","resolve","onloadedmetadata","getVideoDurations","useEffect","React","role","tabindex","onKeyDown","e","querySelector","swiper","slideNext","slidePrev","Swiper","speed","slidesPerView","autoplay","pagination","clickable","navigation","nextEl","prevEl","SwiperSlide","_extends"],"sourceRoot":""}