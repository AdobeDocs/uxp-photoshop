{"version":3,"sources":["webpack:///./node_modules/@adobe/gatsby-theme-aio/src/components/TextBlock/index.js"],"names":["counter","2","3","4","alignMapping","Icons","icons","isCentered","React","cloneElement","css","Texts","texts","Object","keys","filter","key","startsWith","map","textKey","Links","links","LARGE_SCREEN_WIDTH","YouTubeVideo","video","youTubeId","link","getElementChild","url","URL","props","href","hostname","URLSearchParams","search","get","pathname","slice","layoutColumns","TextBlock","heading","buttons","image","theme","width","columns","parseFloat","toFixed","useEffect","blockWidth","extraMargin","className","replace","children","marginTop","marginBottom","justifyContent","aria-hidden","isReversed","slots","endsWith"],"mappings":"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","file":"8b61fb39-4d5d3c11ab0c82f2b4cd.js","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { useEffect } from 'react';\nimport { css } from '@emotion/core';\nimport { HeroButtons } from '../Hero';\nimport { View } from '@adobe/react-spectrum';\nimport '@spectrum-css/typography';\nimport PropTypes from 'prop-types';\nimport { YouTube } from 'mdx-embed';\nimport { getElementChild, layoutColumns, LARGE_SCREEN_WIDTH } from '../../utils';\n\nconst counter = {\n  2: 0,\n  3: 0,\n  4: 0\n};\nconst alignMapping = ['margin-left: 0;', 'margin-right: 0;'];\n\nconst Icons = ({ icons, isCentered }) =>\n  icons\n    ? React.cloneElement(icons, {\n        css: css`\n          list-style: none;\n          padding: 0;\n          margin-bottom: var(--spectrum-global-dimension-size-400) !important;\n          display: flex;\n          justify-content: ${isCentered ? 'center' : 'left'};\n\n          & li {\n            display: flex;\n            border-right: 1px solid var(--spectrum-global-color-gray-300);\n          }\n\n          & img {\n            height: var(--spectrum-global-dimension-size-600);\n          }\n\n          & li:last-of-type {\n            padding-right: 0;\n            border-right: none;\n          }\n        `\n      })\n    : null;\n\nconst Texts = ({ texts }) => {\n  const textKeys = Object.keys(texts).filter((key) => key.startsWith('text'));\n  return textKeys.map((textKey) => texts[textKey]);\n};\n\nconst Links = ({ links, isCentered }) =>\n  links\n    ? React.cloneElement(links, {\n        css: css`\n          list-style: none;\n          padding: 0;\n          display: flex;\n          justify-content: ${isCentered ? 'center' : 'left'};\n          margin-top: ${isCentered\n            ? 'var(--spectrum-global-dimension-size-200) !important;'\n            : 'var(--spectrum-global-dimension-size-600) !important;'};\n\n          @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n            flex-direction: column;\n            align-items: ${isCentered ? 'center' : 'left'};\n\n            li {\n              margin-top: var(--spectrum-global-dimension-size-100);\n            }\n          }\n\n          & li {\n            display: flex;\n            align-items: center;\n          }\n\n          & li a {\n            white-space: nowrap;\n            margin-right: var(--spectrum-global-dimension-size-600);\n          }\n\n          & li:last-of-type a {\n            margin-right: 0;\n          }\n\n          & img {\n            max-height: var(--spectrum-global-dimension-size-400);\n            margin-right: var(--spectrum-global-dimension-size-150);\n            border-radius: 0;\n          }\n        `\n      })\n    : null;\n\nconst YouTubeVideo = ({ video }) => {\n  let youTubeId = null;\n  if (video) {\n    const link = getElementChild(video);\n    let url = new URL(link.props.href);\n    if (url.hostname.startsWith('youtube.com') || url.hostname.startsWith('www.youtube.com')) {\n      const queryParams = new URLSearchParams(url.search);\n      youTubeId = queryParams.get('v');\n    } else if (url.hostname.startsWith('youtu.be')) {\n      youTubeId = url.pathname.slice(1);\n    }\n  }\n\n  return youTubeId ? (\n    <div\n      css={css`\n        & {\n          display: inline;\n          width: ${layoutColumns(6)};\n          box-sizing: border-box;\n          padding: 0 var(--spectrum-global-dimension-size-400);\n          margin: auto;\n\n          @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n            display: block;\n            width: 100%;\n          }\n        }\n      `}>\n      <YouTube youTubeId={youTubeId} />\n    </div>\n  ) : null;\n};\n\nconst TextBlock = ({\n  heading,\n  links,\n  buttons,\n  icons,\n  image,\n  video,\n  theme = 'lightest',\n  width = '100%',\n  isCentered = false,\n  ...props\n}) => {\n  let columns = 100 / parseFloat(width);\n\n  if (width === '33%') {\n    width = `${(100 / 3).toFixed(2)}%`;\n    columns = 3;\n  }\n\n  useEffect(() => {\n    return () => {\n      if (typeof counter[columns] !== 'undefined') {\n        counter[columns]--;\n      }\n    };\n  });\n\n  if (isCentered) {\n    let blockWidth = '';\n    let extraMargin = '';\n\n    if (typeof counter[columns] !== 'undefined') {\n      counter[columns]++;\n    }\n\n    if (columns === 1) {\n      blockWidth = `max-width: ${layoutColumns(6)};`;\n    } else if (columns > 3) {\n      blockWidth = 'max-width: var(--spectrum-global-dimension-size-3600);';\n    } else {\n      blockWidth = 'max-width: var(--spectrum-global-dimension-size-4600);';\n      extraMargin = alignMapping[counter[columns] % columns];\n    }\n\n    return (\n      <>\n        <section\n          className={`spectrum--${theme}`}\n          css={css`\n            display: table-cell;\n            width: ${width.replace('%', 'vw')};\n            background: var(--spectrum-global-color-gray-100);\n            padding: var(--spectrum-global-dimension-size-1000) 0;\n\n            @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n              display: block;\n              width: 100%;\n            }\n          `}>\n          <div\n            css={css`\n              ${blockWidth}\n              padding: 0 var(--spectrum-global-dimension-size-400);\n              margin: auto;\n              ${extraMargin}\n\n              @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                max-width: none;\n                margin: auto;\n              }\n            `}>\n            <Icons icons={icons} isCentered={isCentered} />\n\n            {image &&\n              React.cloneElement(image, {\n                css: css`\n                  height: var(--spectrum-global-dimension-size-1000);\n                  margin-top: 0;\n                  margin-bottom: var(--spectrum-global-dimension-size-300);\n\n                  & img {\n                    height: 100%;\n                    border-radius: 0;\n                    object-fit: contain;\n                  }\n                `\n              })}\n\n            {heading && (\n              <h3\n                className=\"spectrum-Heading--M\"\n                css={css`\n                  margin-bottom: var(--spectrum-global-dimension-size-200) !important;\n\n                  & ~ p {\n                    margin-top: 0;\n                    margin-bottom: 0 !important;\n                  }\n                `}>\n                {heading.props.children}\n              </h3>\n            )}\n\n            <Texts texts={props} />\n\n            <HeroButtons buttons={buttons} marginTop=\"size-150\" marginBottom=\"size-150\" justifyContent=\"center\" />\n\n            <Links links={links} isCentered={isCentered} />\n\n            {video && (\n              <View marginTop=\"size-400\">\n                <YouTubeVideo video={video} />\n              </View>\n            )}\n          </div>\n        </section>\n        {typeof counter[columns] !== 'undefined' && counter[columns] % columns === 0 ? (\n          <div aria-hidden=\"true\" />\n        ) : null}\n      </>\n    );\n  } else {\n    const isReversed = props.slots.endsWith('image') || props.slots.endsWith('video');\n\n    return (\n      <section\n        className={`spectrum--${theme}`}\n        css={css`\n          width: 100%;\n          background: var(--spectrum-global-color-gray-100);\n        `}>\n        <div\n          css={css`\n            width: var(--spectrum-global-dimension-static-grid-fixed-max-width);\n            box-sizing: border-box;\n            margin: auto;\n            padding: var(--spectrum-global-dimension-size-1000) 0;\n\n            @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n              width: 100%;\n\n              & > div {\n                flex-direction: column !important;\n              }\n            }\n          `}>\n          <div\n            css={css`\n              display: flex;\n              align-items: center;\n              flex-direction: ${isReversed ? 'row-reverse' : 'row'};\n\n              @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                flex-direction: column;\n              }\n            `}>\n            {image &&\n              React.cloneElement(image, {\n                css: css`\n                  display: flex;\n                  align-items: center;\n                  justify-content: center;\n                  width: 50%;\n                  height: calc(var(--spectrum-global-dimension-size-4600) - var(--spectrum-global-dimension-size-225));\n                  box-sizing: border-box;\n                  padding: 0 var(--spectrum-global-dimension-size-100);\n                  margin-top: 0;\n\n                  @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                    width: 100%;\n                  }\n\n                  & img {\n                    height: 100%;\n                    border-radius: 0;\n                    object-fit: contain;\n                  }\n                `\n              })}\n\n            <YouTubeVideo video={video} />\n\n            <div\n              css={css`\n                width: 50%;\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                text-align: left;\n                box-sizing: border-box;\n                padding: 0 var(--spectrum-global-dimension-size-400);\n\n                @media screen and (max-width: ${LARGE_SCREEN_WIDTH}) {\n                  width: 100%;\n                  margin: var(--spectrum-global-dimension-size-400) 0;\n                }\n              `}>\n              <Icons icons={icons} isCentered={isCentered} />\n\n              {heading && (\n                <h3\n                  className=\"spectrum-Heading--M\"\n                  css={css`\n                    margin-top: 0 !important;\n                    margin-bottom: var(--spectrum-global-dimension-size-200) !important;\n\n                    & + p {\n                      margin-top: 0 !important;\n                    }\n                  `}>\n                  {heading.props.children}\n                </h3>\n              )}\n\n              <Texts texts={props} />\n\n              <HeroButtons buttons={buttons} marginTop=\"size-400\" />\n\n              <Links links={links} isCentered={isCentered} />\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n};\n\nTextBlock.propTypes = {\n  heading: PropTypes.element,\n  links: PropTypes.element,\n  icons: PropTypes.element,\n  buttons: PropTypes.element,\n  image: PropTypes.element,\n  video: PropTypes.element,\n  theme: PropTypes.string,\n  width: PropTypes.oneOf(['100%', '50%', '33%', '25%']),\n  isCentered: PropTypes.bool\n};\n\nexport { TextBlock };\n"],"sourceRoot":""}