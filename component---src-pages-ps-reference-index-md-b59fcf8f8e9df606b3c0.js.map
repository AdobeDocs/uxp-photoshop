{"version":3,"file":"component---src-pages-ps-reference-index-md-b59fcf8f8e9df606b3c0.js","mappings":"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","sources":["webpack://uxp-photoshop-documentation/./src/pages/ps_reference/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"photoshop-api\"\n    }}>{`Photoshop API`}</h1>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`The following line allows you access to the Photoshop DOM via UXP.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const app = require('photoshop').app;\n`}</code></pre>\n    <p>{`From here, you can open documents, modify them, run menu items, and more.`}</p>\n    <h3 {...{\n      \"id\": \"minimum-version\"\n    }}>{`Minimum Version`}</h3>\n    <p>{`You will now find minimum version information on properties and methods.  This version tag corresponds to the version of Photoshop where the member was introduced or last updated significantly.\nFor properties, you will find a column \"MIN VERSION\".  For methods, the version number appears as a tag to the right of the name.`}</p>\n    <h2 {...{\n      \"id\": \"synchronous-vs-asynchronous\"\n    }}>{`Synchronous vs Asynchronous`}</h2>\n    <p>{`An important difference between ExtendScript (and CEP) and UXP in Photoshop is that all ExtendScript calls to Photoshop were synchronous. This means they blocked the Photoshop UI while they were executing. In UXP, a method call is `}<em parentName=\"p\">{`asynchronous`}</em>{`, and does not block the UI thread.`}</p>\n    <p>{`For a smooth transition between the ExtendScript DOM and the UXP DOM, all properties (get and set) in the API were designed to be `}<em parentName=\"p\">{`synchronous`}</em>{` and do not need to be awaited. It is worth noting that they are, in the background, asynchronous in nature.`}</p>\n    <h2 {...{\n      \"id\": \"working-with-photoshop-objects\"\n    }}>{`Working with Photoshop Objects`}</h2>\n    <h3 {...{\n      \"id\": \"photoshop-application\"\n    }}>{`Photoshop Application`}</h3>\n    <p>{`Through the `}<a parentName=\"p\" {...{\n        \"href\": \"#overview\"\n      }}><inlineCode parentName=\"a\">{`app`}</inlineCode></a>{` object, you can access the rest of Photoshop's objects and methods.`}</p>\n    <p>{`The currently-active document is obtained like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const doc = app.activeDocument;\n`}</code></pre>\n    <p>{`And you can get an array of all open documents like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const allDocuments = app.documents;\n`}</code></pre>\n    <p>{`See more properties and methods in `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` under `}<a parentName=\"p\" {...{\n        \"href\": \"./classes/photoshop/\"\n      }}>{`Photoshop`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"detour---executeasmodal\"\n    }}>{`Detour - ExecuteAsModal`}</h3>\n    <p>{`A key concept to understand before diving straight into Photoshop UXP plugin development is what we have termed \"execute as modal\". Any and all commands that may `}<strong parentName=\"p\">{`modify the document`}</strong>{`, or the `}<strong parentName=\"p\">{`application state`}</strong>{`, must utilize executeAsModal.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`async function makeDefaultDocument(executionContext) {\n  const app = require('photoshop').app;\n  let myDoc = await app.createDocument({preset: \"My Web Preset 1\"});\n}\n\nawait require('photoshop').core.executeAsModal(makeDefaultDocument);\n`}</code></pre>\n    <p>{`As you may notice, this restriction could encompass much of your plugin's functionality! There are many benefits for this model, however. A more detailed explanation is provided in the `}<a parentName=\"p\" {...{\n        \"href\": \"./media/executeasmodal/\"\n      }}>{`Execute as Modal documentation`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"document\"\n    }}>{`Document`}</h3>\n    <p>{`Represents a single, open Photoshop document. From this object, you can access the document's layers, dimensions, resolution, etc. You can crop it, add/delete/duplicate layers, resize, rotate, and save it.`}</p>\n    <p>{`Get the dimensions of the active document:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const app = require('photoshop').app;\nconst myDoc = app.activeDocument;\nconst height = myDoc.height;\nconst width = myDoc.width;\nconst resolution = myDoc.resolution;\nconsole.log(\\`Doc size is \\${width} x \\${height}. Resolution is \\${resolution}\\`);\n`}</code></pre>\n    <p>{`Flatten all currently open documents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const app = require('photoshop').app;\nconst toFlatten = app.documents;\nasync function flattenThem(executionContext) {\n  toFlatten.forEach((photoshopDoc) => {\n    photoshopDoc.flatten();\n  });\n};\n\nawait require('photoshop').core.executeAsModal(flattenThem);\n`}</code></pre>\n    <p>{`Create a layer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const app = require('photoshop').app;\nasync function newColorDodgeLayer(executionContext) {\n  await app.activeDocument.createLayer({ name: \"myLayer\", opacity: 80, blendMode: \"colorDodge\" });\n};\n\nawait require('photoshop').core.executeAsModal(newColorDodgeLayer);\n`}</code></pre>\n    <p>{`See more properties and methods regarding `}<inlineCode parentName=\"p\">{`Document`}</inlineCode>{` under `}<a parentName=\"p\" {...{\n        \"href\": \"./classes/document/\"\n      }}>{`Document`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"./classes/documents\"\n      }}>{`Documents`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"layer\"\n    }}>{`Layer`}</h3>\n    <p>{`Represents a Layer, or a group of Layers. This object is tied to a particular `}<a parentName=\"p\" {...{\n        \"href\": \"#Document\"\n      }}>{`Document`}</a>{`.`}</p>\n    <p>{`Decrease a layer's opacity and bring it to the front:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const app = require('photoshop').app;\nconst doc = app.activeDocument;\nfunction bringActiveLayerToFront(executionContext) {\n  const layer = doc.activeLayers[0];\n  layer.opacity = layer.opacity - 10;\n  layer.bringToFront();\n};\n\nawait require('photoshop').core.executeAsModal(bringActiveLayerToFront);\n`}</code></pre>\n    <p>{`Scale down each layer whose name includes 'smaller'`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const app = require('photoshop').app;\nconst doc = app.activeDocument;\nconst layers = doc.layers;\nasync function scaleLayers(executionContext) {\n  for (layer of layers) {\n    if (layer.name.includes('smaller')) {\n      await layer.scale(80, 80);\n    }\n  }\n};\n\nawait require('photoshop').core.executeAsModal(scaleLayers);\n`}</code></pre>\n    <p>{`Note that a layer's `}<inlineCode parentName=\"p\">{`kind`}</inlineCode>{` property can be `}<inlineCode parentName=\"p\">{`GROUP`}</inlineCode>{` for a Group layer (a layer or folder containing multiple layers). To access the layers in a Group layer, use the `}<inlineCode parentName=\"p\">{`layers`}</inlineCode>{` property, and the `}<inlineCode parentName=\"p\">{`parent`}</inlineCode>{` property to navigate the layer list tree.`}</p>\n    <p>{`See more properties and methods for `}<inlineCode parentName=\"p\">{`Layer`}</inlineCode>{` under `}<a parentName=\"p\" {...{\n        \"href\": \"./classes/layer/\"\n      }}>{`Layer`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"./classes/layers/\"\n      }}>{`Layers`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"actions-and-actionsets\"\n    }}>{`Actions and ActionSets`}</h3>\n    <p>{`Many Photoshop users make heavy use of the `}<inlineCode parentName=\"p\">{`Actions`}</inlineCode>{` panel. Actions are essentially macros that can be recorded and played back to script commands and tools that you use frequently. Actions are grouped into `}<inlineCode parentName=\"p\">{`Action Sets`}</inlineCode>{`, similar to the way layers can be grouped into Group layers.`}</p>\n    <p>{`The Actions object allows you to delete, duplicate, rename, and play actions. There is no current way to `}<em parentName=\"p\">{`create`}</em>{` an action using UXP.`}</p>\n    <p>{`Similarly to Actions, the ActionSet object allows you to delete, duplicate, rename, and play Action Sets. There is no current way to `}<em parentName=\"p\">{`create`}</em>{` an Action Set.`}</p>\n    <p>{`Note that Actions and Action Sets exist app-wide; they're not tied to a specific Document.`}</p>\n    <p>{`Here's an example that finds a particular Action in the default Action Set, then plays it if it exists:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const app = require('photoshop').app;\nconst allActionSets = app.actionTree;\nconst firstActionSet = allActionSets[0];\nlet actions = new Map(); // a JS Map allows easy \"find by name\" operations\nfirstActionSet.actions.forEach((action) => { actions.set(action.name, action)});\nconst myAction = actions.get(\"Wood Frame - 50 pixel\");\nif (myAction) { // user may have deleted this action\n  async function playMyAction(executionContext) {\n    await myAction.play();\n  }\n  await require('photoshop').core.executeAsModal(playMyAction);\n}\n`}</code></pre>\n    <p>{`See more properties and methods for `}<inlineCode parentName=\"p\">{`Action`}</inlineCode>{` under `}<a parentName=\"p\" {...{\n        \"href\": \"./classes/action/\"\n      }}>{`Action`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"./classes/actionset/\"\n      }}>{`ActionSet`}</a></p>\n    <h3 {...{\n      \"id\": \"batchplay\"\n    }}>{`batchPlay`}</h3>\n    <p>{`Photoshop is complex software, with many internal classes and methods. Not all of these are yet exposed via UXP. New interfaces are in development and will be shipped along with each release of Photoshop. In the meantime, if there is something your plugin or script needs to do that is not exposed in the current DOM, you may be able to use `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{`.`}</p>\n    <p>{`BatchPlay is for accessing Photoshop functionality that has not yet been exposed via APIs. BatchPlay is a way to send multiple actions into the Photoshop event queue and return their results.`}</p>\n    <p>{`ExtendScript has `}<inlineCode parentName=\"p\">{`executeAction`}</inlineCode>{`; this is analagous to UXP's `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{`. However, whereas `}<inlineCode parentName=\"p\">{`executeAction`}</inlineCode>{` could only play one descriptor at a time, `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` accepts an array of action descriptors. If you have multiple Photoshop operations that need to execute in series, using an array of action descriptors in a single `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` call is probably what you want.`}</p>\n    <p>{`Unlike ExtendScript where classes were provided to construct action descriptors, references and values, `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` accepts plain JSON objects.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-photoshop/ps_reference/media/batchplay/\"\n      }}>{`batchPlay documentation`}</a>{` contains details on how to construct JSON for `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` usage.`}</p>\n    <h2 {...{\n      \"id\": \"uxp-scripting\"\n    }}>{`UXP Scripting`}</h2>\n    <p>{`UXP is not just for plugins anymore.  Individual JavaScript files may be developed and executed as detailed in the `}<a parentName=\"p\" {...{\n        \"href\": \"./media/uxpscripting\"\n      }}>{`UXP Scripting section`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}