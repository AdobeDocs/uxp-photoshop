{"version":3,"sources":["webpack://uxp-photoshop-documentation/./src/pages/ps_reference/media/advanced/cpp-pluginsdk.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2RAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,yBACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,0BADR,6BAGA,6UAA8T,uBAAYC,WAAW,KAAvB,MAA9T,oBAAgY,uBAAYA,WAAW,KAAvB,iBAAhY,WACA,eACE,GAAM,cADR,eAGA,qJAAsI,uBAAYA,WAAW,KAAvB,cAAtI,oDAAgP,cAAGA,WAAW,IAC1P,KAAQ,gEADoO,gBAAhP,qCAGA,wCAAyB,uBAAYA,WAAW,KAAvB,gBAAzB,qBACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,mZAWL,eACE,GAAM,yBADR,0BAGA,mBAAG,uBAAYA,WAAW,KAAvB,8BAAH,4EAAqJ,uBAAYA,WAAW,KAAvB,iBAArJ,wDACA,eACE,GAAM,wBADR,yBAGA,2HACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,ibAYL,eACE,GAAM,wBADR,4BAGA,eACE,GAAM,qCADR,wBAE2B,uBAAYA,WAAW,MAAvB,oBAC3B,yEAA0D,uBAAYA,WAAW,KAAvB,kBAA1D,6EACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,0PASL,eACE,GAAM,6BADR,oBAEuB,uBAAYA,WAAW,MAAvB,gBACvB,gEAAiD,uBAAYA,WAAW,KAAvB,cAAjD,+EACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,8UAUL,eACE,GAAM,wBADR,yBAGA,gKACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,gqBAoBL,eACE,GAAM,sBADR,uBAGA,yDAA0C,uBAAYA,WAAW,KAAvB,aAA1C,+GACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,4SAYL,eACE,GAAM,yBADR,0BAGA,iIAAkH,uBAAYA,WAAW,KAAvB,yBAAlH,SAA4L,uBAAYA,WAAW,KAAvB,4BAA5L,8BACA,eACE,GAAM,qBADR,sBAGA,sFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,uFAML,eACE,GAAM,mBADR,oBAGA,0FACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,wEAIL,eACE,GAAM,qBADR,sBAGA,yFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,wDAIL,4BACE,cAAGA,WAAW,eAAa,eAAIA,WAAW,KAAf,QAA3B,uDAEF,eACE,GAAM,gCADR,iCAGA,gHAAiG,uBAAYA,WAAW,KAAvB,QAAjG,0CAA2L,uBAAYA,WAAW,KAAvB,uBAA3L,MACA,kHACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,8KAYTJ,EAAWK,gBAAiB","file":"component---src-pages-ps-reference-media-advanced-cpp-pluginsdk-md-31d08730adf382181f3f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"c-to-uxp-communication\"\n    }}>{`C++ to UXP Communication`}</h1>\n    <p>{`For developers with the intent to utilize the C++ based plugin SDK in conjunction with a UXP based plugin, the C++ SDK now includes a method to communicate with its UXP counterpart. On C++ side, we use the component's plugin name property in the plugin resource to identify plugins, and on UXP side, we use the `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` field from the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{` file.`}</p>\n    <h1 {...{\n      \"id\": \"piuxpsuite\"\n    }}>{`PIUXPSuite`}</h1>\n    <p>{`The PIUXPSuite communicates with UXP plugins using PIActionDescriptors. Use the ActionDescriptor suite as defined in the SDK's `}<inlineCode parentName=\"p\">{`PIAction.h`}</inlineCode>{` whenever using this suite. To start with, grab `}<a parentName=\"p\" {...{\n        \"href\": \"/uxp-photoshop/78adbbf874cb22c450c9e6222dd9e0fc/PIUXPSuite.h\"\n      }}>{`PIUXPSuite.h`}</a>{` and add it to your C++ project.`}</p>\n    <p>{`The signatures in `}<inlineCode parentName=\"p\">{`PIUXPSuite.h`}</inlineCode>{` are as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`typedef void (*PIUXPMessageNotifier)(PIActionDescriptor descriptor);\ntypedef struct PsUXPSuite1\n{\n    SPAPI SPErr (*SendUXPMessage) (SPPluginRef selfRef, const char* uxpPluginId, PIActionDescriptor descriptor);\n    SPAPI SPErr (*AddUXPMessageListener) (SPPluginRef selfRef, PIUXPMessageNotifier notifier);\n    SPAPI SPErr (*RemoveUXPMessageListener) (SPPluginRef selfRef);\n\n} PsUXPSuite1;\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"csdk-to-uxp-messaging\"\n    }}>{`CSDK to UXP messaging`}</h1>\n    <p><inlineCode parentName=\"p\">{`PsUXPSuite1.SendUXPMessage`}</inlineCode>{` can be used to send messages to a UXP plugin given the plugin ID (from `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`) and an action descriptor containing the message. `}</p>\n    <h2 {...{\n      \"id\": \"includes-and-globals\"\n    }}>{`Includes and globals`}</h2>\n    <p>{`First, make sure to include the right files and declare the globals to store the important pointers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// Include these\n#include \"PIActions.h\" // For PIActionDescriptor\n#include \"PIUXPSuite.h\" // For messaging\n\n// Your globals\nSPBasicSuite * sSPBasic = NULL; // This is passed to your main function\nSPPluginRef gPlugInRef = NULL; // This is passed to your main function\nPsUXPSuite1* sUxpProcs = NULL; // You acquire this using sSPBasic\nPSActionDescriptorProcs* sDescriptorProcs = NULL; // You acquire this using sSPBasic\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"based-on-plugin-type\"\n    }}>{`Based on Plugin Type...`}</h2>\n    <h3 {...{\n      \"id\": \"automation-plugins-autopluginmain\"\n    }}>{`Automation Plugins: `}<inlineCode parentName=\"h3\">{`AutoPluginMain`}</inlineCode></h3>\n    <p>{`For Automation plugins, the entry method is called `}<inlineCode parentName=\"p\">{`AutoPluginMain`}</inlineCode>{` use the code below to extract the plugin reference and the basic suite.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`DLLExport SPAPI SPErr AutoPluginMain(const char* caller, const char* selector, void* message) {\n\n    SPMessageData* basicMessage = (SPMessageData*) message;\n    sSPBasic = basicMessage->basic;\n    gPlugInRef = basicMessage->self;\n    ...\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"filter-plugins-pluginmain\"\n    }}>{`Filter plugins: `}<inlineCode parentName=\"h3\">{`PluginMain`}</inlineCode></h3>\n    <p>{`Filter plugins use an entry method called `}<inlineCode parentName=\"p\">{`PluginMain`}</inlineCode>{`, in which you can grab the basic suite and the plugin reference directly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`DLLExport MACPASCAL void PluginMain(const int16 selector,\n                                    FilterRecordPtr filterRecord,\n                                    intptr_t * data,\n                                    int16 * result) {\n    sSPBasic = filterRecord->sSPBasic;\n    gPlugInRef = filterRecord->plugInRef; \n    ...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"acquiring-the-suites\"\n    }}>{`Acquiring the suites`}</h2>\n    <p>{`Next up is acquiring the correct suites to create your messages with ActionDescriptors and sending them to the UXP plugin of your choice.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// in your main method\n    sSPBasic->AcquireSuite(kPSUXPSuite,\n                           kPSUXPSuiteVersion1,\n                           (const void**)&sUxpProcs);\n\n    sSPBasic->AcquireSuite(kPSActionDescriptorSuite,\n                           kPSActionDescriptorSuiteVersion,\n                           (const void**)&sDescriptorProcs);\n\n    PIActionDescriptor desc;\n    sDescriptorProcs->Make(&desc);\n    sDescriptorProcs->PutString(desc, 'helo', \"Hello World!\");\n    sDescriptorProcs->PutFloat(desc, 'fltp', 0.952);\n\n    const char* UXP_MANIFEST_ID = \"com.your.pluginId\";\n    sUxpProcs->SendUXPMessage(gPlugInRef, UXP_MANIFEST_ID, desc);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"on-your-uxp-plugin\"\n    }}>{`On your UXP plugin`}</h2>\n    <p>{`Add a messaging listener using the `}<inlineCode parentName=\"p\">{`messaging`}</inlineCode>{` API group. Any descriptors sent from a CSDK plugin to the ID of this plugin will arrive on this callback.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let callback = (o) => { \n    console.log(\"Message from \" + o.pluginId + \":\" + o.message); \n}\n\nrequire('photoshop').messaging.addSDKMessagingListener(callback);\n\n...\n// You can remove your listener using this API\nrequire('photoshop').messaging.removeSDKMessagingListener(callback);\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"uxp-to-csdk-messaging\"\n    }}>{`UXP to CSDK messaging`}</h1>\n    <p>{`For communication from a UXP plugin to a C plugin, define a listener within your CPlugin, and utilize both `}<inlineCode parentName=\"p\">{`AddUXPMessageListener`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`RemoveUXPMessageListener`}</inlineCode>{` at the appropriate time.`}</p>\n    <h2 {...{\n      \"id\": \"listener-callback\"\n    }}>{`Listener Callback`}</h2>\n    <p>{`All messages sent to this plugin will be handled in this method`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`void UXPMessageHandler(PIActionDescriptor descriptor) {\n    // do something\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-listener\"\n    }}>{`Adding listener`}</h2>\n    <p>{`Use the code below where you'd like to start listening to messages.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`sUxpProcs->AddUXPMessageListener(gPlugInRef, UXPMessageHandler);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"removing-listener\"\n    }}>{`Removing listener`}</h2>\n    <p>{`Use the code below to stop listening to messages from UXP plugins.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`sUxpProcs->RemoveUXPMessageListener(gPlugInRef);\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`NOTE`}</em>{`: Only one notifier per plugin may be registered.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"sending-the-message-from-uxp\"\n    }}>{`Sending the message from UXP`}</h2>\n    <p>{`To send messages to the C Plugin, take note of the Component Id as defined in its resouce `}<inlineCode parentName=\"p\">{`PiPL`}</inlineCode>{`. This is the second parameter of the `}<inlineCode parentName=\"p\">{`PIComponentProperty`}</inlineCode>{`.`}</p>\n    <p>{`With this Id, use the messaging group of the photoshop package to send your message across.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let messageContent = {\n    status: \"ok\",\n    filter: 416\n};\nwindow.require('photoshop').messaging.sendSDKPluginMessage(<YourPluginComponentId>, messageContent);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}