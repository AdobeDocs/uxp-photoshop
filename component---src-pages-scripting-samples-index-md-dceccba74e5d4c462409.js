"use strict";(self.webpackChunkuxp_photoshop_documentation=self.webpackChunkuxp_photoshop_documentation||[]).push([[30294],{74354:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return p}});var a=t(87462),o=t(63366),i=(t(15007),t(64983)),l=t(91515),d=["components"],s={},r={_frontmatter:s},c=l.Z;function p(e){var n=e.components,t=(0,o.Z)(e,d);return(0,i.mdx)(c,(0,a.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"samples"},"Samples"),(0,i.mdx)("h2",{id:"create-a-new-layer"},"Create a new layer"),(0,i.mdx)("p",null,"You can create a script that creates a new layer, with the help of the Photoshop DOM API: "),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"const app = require('photoshop').app;\nawait app.documents.add();\nawait app.activeDocument.createLayer();\napp.activeDocument.layers[0].name = 'New layer';\n")),(0,i.mdx)("h2",{id:"access-the-local-filesystem"},"Access the local filesystem"),(0,i.mdx)("p",null,"You can create a script that accesses your local filesystem, with the help of the UXP storage module: "),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'const uxpfs = require("uxp").storage;\nconst ufs = uxpfs.localFileSystem;\n\ntry {\n    const folder = await ufs.getTemporaryFolder()\n    const metadata = await folder.getMetadata();\n    console.log(JSON.stringify(metadata));\n} catch (e) {\n    console.log(`Local File system error: ${e}`);\n}\n')),(0,i.mdx)("h2",{id:"using-a-file-picker"},"Using a file picker"),(0,i.mdx)("p",null,"You can create a script that instantiates a file picker for writing/saving to files."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'const fs = require(\'uxp\').storage.localFileSystem;\ntry {\n    // save file to a location using file picker\n    const file = await fs.getFileForSaving("demo.txt");\n    await file.write("Hello World! This is demo.");\n} catch (e) {\n    console.log(e);\n}\n')),(0,i.mdx)("h2",{id:"readwrite-to-clipboard"},"Read/write to clipboard"),(0,i.mdx)("p",null,"You can access the clipboard module (",(0,i.mdx)("inlineCode",{parentName:"p"},"navigator.clipboard"),") to: "),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"write to a clipboard (",(0,i.mdx)("inlineCode",{parentName:"li"},"setContent()"),")"),(0,i.mdx)("li",{parentName:"ul"},"read a clipboard's contents (",(0,i.mdx)("inlineCode",{parentName:"li"},"readText()"),")")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"try {\n    const clipboard = navigator.clipboard;\n    await clipboard.setContent({ 'text/plain': \"Test string\" });\n} catch (e) {\n    throw new Error(e);\n}\ntry {\n    const clipboard = navigator.clipboard;\n    const text = await clipboard.readText();\n    console.log(text);\n}  catch (e) {\n    throw new Error(e);\n}\n")),(0,i.mdx)("h2",{id:"create-dialog-uis"},"Create dialog UIs"),(0,i.mdx)("h3",{id:"simple-example"},"Simple example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'async function createDialog() {\n    const dialog = document.createElement("dialog");\n    dialog.style.color = "white";\n    const div = document.createElement("div");\n    div.style.display = "block";\n    div.style.height = "200px";\n    div.style.width = "400px";\n    const header = document.createElement("h2");\n    header.id = "head";\n    header.style.color = "white";\n    header.textContent = "Sample Dialog";\n    div.appendChild(header);\n    dialog.appendChild(div);\n    await document.body.appendChild(dialog).showModal();\n}\n// Wait for the dialog to render\nawait createDialog();\n')),(0,i.mdx)("h3",{id:"example-with-done-button"},'Example with "Done" button'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'async function showDialog() {\n    let dialog = createDialog();\n    document.body.appendChild(dialog).showModal();\n\n    // Give the script time to show the dialog by returning a promise. Make sure that it is resolved/rejected later.\n    return new Promise((resolve, reject) => {\n        try {\n            // Resolve the promise and dismiss the dialog when when user clicks on \'Done\' button\n            const doneBtn = document.getElementById("done");\n            doneBtn.addEventListener("click", () => {\n                console.log("user is done");\n                dialog.close();\n                resolve("user is done");\n            })\n\n            // reject when dialog is cancelled/closed\n            dialog.addEventListener("cancel", () => {\n                console.log("dialog cancelled");\n                reject("dialog cancelled");\n            });\n\n            dialog.addEventListener("close", () => {\n                console.log("dialog closed");\n                reject("dialog closed");\n            });\n        } catch (e) {\n            console.log(e);\n            reject(e);\n        }\n    })\n}\n\nfunction createDialog() {\n    const dialog = document.createElement("dialog");\n    dialog.style.color = "white";\n    const div = document.createElement("div");\n    div.style.display = "block";\n    div.style.height = "200px";\n    div.style.width = "400px";\n    const header = document.createElement("h2");\n    header.id = "head";\n    header.style.color = "white";\n    header.textContent = "Sample Dialog";\n    div.appendChild(header);\n    const doneButton = document.createElement("button");\n    doneButton.id = "done";\n    doneButton.textContent = "Done";\n    div.appendChild(doneButton);\n    dialog.appendChild(div);\n    return dialog;\n}\n\n// Wait for the dialog to render\nawait showDialog();\n')),(0,i.mdx)("h2",{id:"access-installed-fonts"},"Access installed fonts"),(0,i.mdx)("p",null,"Photoshop has set the permission for the Fonts module to ",(0,i.mdx)("inlineCode",{parentName:"p"},"ReadInstalled"),'. This means that if no font is specified or if the font is not installed, then UXP will fallback to "system-ui" font (the default OS system UI font).'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'async function createDialog() {\n    const dialog = document.createElement("dialog");\n\n    dialog.style.color = "white";\n\n    const div = document.createElement("div");\n    div.style.display = "block";\n    div.style.height = "200px";\n    div.style.width = "450px";\n\n    const p1 = createParagraph("system-ui"); // use default OS font\n    const p2 = createParagraph("non-existent-font"); // try using a non existent font. Will resolve to OS default.\n    const p3 = createParagraph("Courier New"); // use any installed font\n    div.appendChild(p1);\n    div.appendChild(p2);\n    div.appendChild(p3);\n\n    dialog.appendChild(div);\n    await document.body.appendChild(dialog).showModal();\n}\n\nfunction createParagraph(fontFamily) {\n    const p = document.createElement("p");\n    p.style.color = "white";\n    p.style.fontFamily = fontFamily;\n    p.textContent = `font-family:${fontFamily}: A fox jumps over the lazy dog`;\n    return p;\n}\n\n// Wait for the dialog to render\nawait createDialog();\n')),(0,i.mdx)("p",null,(0,i.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1034px"}},"\n      ",(0,i.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"57.8125%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,i.mdx)("picture",{parentName:"span"},"\n          ",(0,i.mdx)("source",{parentName:"picture",srcSet:["/uxp-photoshop/static/6e7995d04a092809fd7b8fb8691cf294/5530d/fonts.webp 320w","/uxp-photoshop/static/6e7995d04a092809fd7b8fb8691cf294/0c8fb/fonts.webp 640w","/uxp-photoshop/static/6e7995d04a092809fd7b8fb8691cf294/e4622/fonts.webp 1034w"],sizes:"(max-width: 1034px) 100vw, 1034px",type:"image/webp"}),"\n          ",(0,i.mdx)("source",{parentName:"picture",srcSet:["/uxp-photoshop/static/6e7995d04a092809fd7b8fb8691cf294/dd4a7/fonts.png 320w","/uxp-photoshop/static/6e7995d04a092809fd7b8fb8691cf294/0f09e/fonts.png 640w","/uxp-photoshop/static/6e7995d04a092809fd7b8fb8691cf294/b69f7/fonts.png 1034w"],sizes:"(max-width: 1034px) 100vw, 1034px",type:"image/png"}),"\n          ",(0,i.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/uxp-photoshop/static/6e7995d04a092809fd7b8fb8691cf294/b69f7/fonts.png",alt:"Fonts example",title:"Fonts example",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-scripting-samples-index-md-dceccba74e5d4c462409.js.map