{"version":3,"file":"component---src-pages-guides-uxp-guide-uxp-misc-localization-and-platforms-index-md-7e4fb90005060c699746.js","mappings":"4SAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,8BADR,+BAGA,eACE,GAAM,gBADR,iBAGA,4JACA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,eADZ,qNASL,0DAA2C,uBAAYA,WAAW,KAAvB,UAA3C,oJACA,gHAAiG,uBAAYA,WAAW,KAAvB,aAAjG,QAA8J,uBAAYA,WAAW,KAAvB,aAA9J,6DACA,eACE,GAAM,qBADR,sBAGA,yMACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,iGAKL,mBAAG,uBAAYA,WAAW,KAAvB,UAAH,iFAGH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://uxp-photoshop-documentation/./src/pages/guides/uxp_guide/uxp-misc/localization-and-platforms/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"localization-and-platforms\"\n    }}>{`Localization and Platforms`}</h1>\n    <h2 {...{\n      \"id\": \"localization\"\n    }}>{`Localization`}</h2>\n    <p>{`Sometimes it's necesssary (for localization or other reasons) to find out what a plugin's host environment is. Here's how to do that:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const host = require('uxp').host;\nconst locale = host.uiLocale;\nconst hostName = host.name\nconst hostVersion = host.version;\n\nconsole.log(\\`locale: \\${locale}  host \\${hostName} version \\${hostVersion}\\`);\n`}</code></pre>\n    <p>{`You can use the returned strings in `}<inlineCode parentName=\"p\">{`switch`}</inlineCode>{` statements (or other control flow techniques) to alter your plugin's behavior, such as outputting the correct strings in messages and dialogs.`}</p>\n    <p>{`You can also use it to change properties of HTML components in your panels (typically the `}<inlineCode parentName=\"p\">{`innerHTML`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`innerText`}</inlineCode>{` property) so they contain the correct language strings.`}</p>\n    <h2 {...{\n      \"id\": \"os-identification\"\n    }}>{`OS Identification`}</h2>\n    <p>{`Sometimes you need to write different code depending upon whether your plugin is hosted on macOS or Windows. You can find out what app your plugin is hosted in with this methods:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const hostOS = require('os').platform(); \n// note that this is a method, not a property.\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`hostOS`}</inlineCode>{` will contain the string \"darwin\" for macOS and \"windows\" for, well, Windows.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}