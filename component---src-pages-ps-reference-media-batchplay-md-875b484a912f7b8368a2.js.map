{"version":3,"file":"component---src-pages-ps-reference-media-batchplay-md-875b484a912f7b8368a2.js","mappings":"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","sources":["webpack://uxp-photoshop-documentation/./src/pages/ps_reference/media/batchplay.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"batchplay\"\n    }}>{`batchPlay`}</h1>\n    <p>{`At the heart of our APIs is `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{`, a method that executes one or more Photoshop action commands and return their results.`}</p>\n    <p><em parentName=\"p\">{`batchPlay is an advanced API, and we recommend trying to first use the DOM APIs before resorting to using batchPlay.`}</em></p>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`BatchPlay can directly be accessed from the Photoshop action module, and as most other APIs it is asynchronous by default and returns a promise.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require('photoshop').action.batchPlay(descriptors: ActionDescriptor[], options: Object): Promise<Object[]>\n`}</code></pre>\n    <p>{`Below we will dive into both how action commands are defined in JavaScript, and what options are available.`}</p>\n    <h3 {...{\n      \"id\": \"descriptors\"\n    }}>{`Descriptors`}</h3>\n    <p>{`The first argument to `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` is an array of descriptors (also called action descriptors).`}</p>\n    <p>{`UXP for Photoshop uses a textual representation of these action descriptors. This format is sometimes referred to as `}<inlineCode parentName=\"p\">{`actionJSON`}</inlineCode>{`.`}</p>\n    <p>{`An action descriptor contains the following components:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The command. This describes the desired Photoshop command. The command is specified via the `}<inlineCode parentName=\"li\">{`_obj`}</inlineCode>{` keyword.`}</li>\n      <li parentName=\"ul\">{`The target for the command. This describes the (DOM) element that the command should operate on. The target is specified via the `}<inlineCode parentName=\"li\">{`_target`}</inlineCode>{` keyword. This property is sometimes omitted. If omitted, the command operates on a default element. The default element is typically the object that is active in the UI.`}</li>\n      <li parentName=\"ul\">{`Command parameters. Describes the various parameters for the command.`}</li>\n      <li parentName=\"ul\">{`Command execution options. Options related to how the command should be executed.`}</li>\n    </ul>\n    <p>{`The following is an example of an `}<inlineCode parentName=\"p\">{`actionJSON`}</inlineCode>{` command for hiding a layer `}<a id=\"hidelayerexample\"></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  _obj: \"hide\",\n  _target:[\n    {_ref: \"layer\", _enum: \"ordinal\", _value: \"targetEnum\"},\n    {_ref: \"document\", _enum: \"ordinal\", _value: \"targetEnum\"}\n  ]\n}\n`}</code></pre>\n    <p>{`The command is `}<inlineCode parentName=\"p\">{`hide`}</inlineCode>{` as specified by the `}<inlineCode parentName=\"p\">{`_obj`}</inlineCode>{` keyword.`}</p>\n    <p>{`The value of `}<inlineCode parentName=\"p\">{`_target`}</inlineCode>{` is called an `}<inlineCode parentName=\"p\">{`action reference`}</inlineCode>{` and specifies which layer should be hidden. The action reference specifies the target in reverse order - from most specific to least (similar to a postal address). To find the DOM object for a target you go from the last value in the list to the first. In this example we have:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`{\"_ref\":\"document\", \"_enum\":\"ordinal\",\"_value\":\"targetEnum\"}`}</inlineCode>{` First find the target document. It is specified as `}<inlineCode parentName=\"li\">{`ordinal`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`targetEnum`}</inlineCode>{`. This means the active (front most) document.`}</li>\n      <li parentName=\"ul\">{`In that document we look for the layer specified as `}<inlineCode parentName=\"li\">{`{\"_ref\":\"layer\",\"_enum\":\"ordinal\",\"_value\":\"targetEnum\"}`}</inlineCode>{`. This means the active (selected) layer.`}</li>\n    </ul>\n    <p>{`For this command we are therefore targeting the selected layer in the front most document. `}<inlineCode parentName=\"p\">{`targetEnum`}</inlineCode>{` is the default value for ordinal enumerations and can be omitted. See the section on `}<a parentName=\"p\" {...{\n        \"href\": \"#action-references\"\n      }}>{`action references`}</a>{` below for details.`}</p>\n    <p>{`This command modifies the Photoshop state and must therefore be executed from within a modal scope. See the documentation of `}<a parentName=\"p\" {...{\n        \"href\": \"./executeasmodal\"\n      }}>{`executeAsModal`}</a>{` for details. The following JavaScript uses batchPlay to hide the active layer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`async function hideActiveLayer() {\n  return await require(\"photoshop\").action.batchPlay([{_obj:\"hide\", _target:[{_ref: \"layer\", _enum: \"ordinal\"},{_ref: \"document\", _enum: \"ordinal\"}]}], {});\n}\nlet result = require(\"photoshop\").core.executeAsModal(hideActiveLayer, {\"commandName\": \"Hide Layer\"});\n`}</code></pre>\n    <p>{`Here is another example of `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`actionJSON`}</inlineCode>{`. This examples returns the value of a specific document pixel.\nThis example illustrates providing `}<inlineCode parentName=\"p\">{`samplePoint`}</inlineCode>{` as an additional command parameter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`async function samplePixel() {\n  return await require(\"photoshop\").action.batchPlay([{\n    _obj: \"colorSampler\",\n    _target: {_ref: \"document\",_enum: \"ordinal\",_value: \"targetEnum\"},\n    samplePoint: {\n      horizontal: 100,\n      vertical: 100\n    }\n  }], {});\n}\nlet result = await require(\"photoshop\").core.executeAsModal(samplePixel, {\"commandName\": \"Sample Pixel\"});\n`}</code></pre>\n    <p>{`Sample output from the colorSampler command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[{\"colorSampler\":{\"_obj\":\"CMYKColorClass\",\"black\":0,\"cyan\":26.27,\"magenta\":4.71,\"yellowColor\":0},\"sampledData\":true}]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"accepted-action-descriptors\"\n    }}>{`Accepted action descriptors`}</h4>\n    <p>{`The composition of action descriptors can be complicated. Photoshop provides a number of ways that help a developer understand which descriptors Photoshop accepts.`}</p>\n    <p>{`The first way is to use the `}<inlineCode parentName=\"p\">{`Actions`}</inlineCode>{` panel. Create a new action and record the commands that you want to run from JavaScript. Then select the action in the `}<inlineCode parentName=\"p\">{`Actions`}</inlineCode>{` panel, or one or more individual steps in the action. Now select `}<inlineCode parentName=\"p\">{`Copy As JavaScript`}</inlineCode>{` from the panel flyout menu. This will copy UXP compatible JavaScript for the selected items to the clipboard. `}<inlineCode parentName=\"p\">{`Copy As JavaScript`}</inlineCode>{` is available from the flyout menu when developer mode is enabled.\nThe following is an example of copying a single \"make layer\" command as JavaScript:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`async function actionCommands() {\n    let command;\n    let result;\n    let psAction = require(\"photoshop\").action;\n\n    // Make layer\n    command = {\"_obj\":\"make\",\"_target\":[{\"_ref\":\"layer\"}],\"layerID\":2};\n    result = await psAction.batchPlay([command], {});\n}\n\nasync function runModalFunction() {\n    await require(\"photoshop\").core.executeAsModal(actionCommands, {\"commandName\": \"Action Commands\"});\n}\n\nawait runModalFunction();\n`}</code></pre>\n    <p>{`Another option is to create a listener function in JavaScript. This is done by providing the global event hook to a low level API. This call only works when developer mode is enabled.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require('photoshop').action.addNotificationListener(['all'], (event, descriptor) => {console.log(\"Event:\" + event + \" Descriptor: \" + JSON.stringify(descriptor))});\n`}</code></pre>\n    <p>{`Another option is to use the developer UI to log action descriptors to a file. When \"developer mode\" is enabled, then the following menu items will be available:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`\"Plugins > Development > Record Action Commands...\" This menu item can be used to save any Photoshop command as an action descriptor to a file. After selecting the menu item and selecting the destination file, perform one of more Photoshop commands using the normal UI. Then choose \"Plugins > Development > Stop Action Recording\". The destination file will contain actionJSON for the performed commands.`}</li>\n      <li parentName=\"ul\">{`\"Plugins > Development > Record Action Notifications...\" This menu item will save both commands and change notifications to the selected destination file. `}</li>\n    </ul>\n    <p>{`Lastly, you can record your actions as a standard Photoshop action using the Actions panel. Then export actions to an `}<inlineCode parentName=\"p\">{`actionJSON`}</inlineCode>{` format by doing the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Select the action set that contains the command.`}</li>\n      <li parentName=\"ul\">{`Press (macOS)\"shift+option+command\" or (Windows)\"shift+control+alt\" and choose \"Save Actions...\" from the panel fly-out menu.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"command-execution-options\"\n    }}>{`Command execution options`}</h4>\n    <p>{`An action descriptor can include a `}<inlineCode parentName=\"p\">{`_options`}</inlineCode>{` property. If present then its value specifies how the command is executed.\n`}<inlineCode parentName=\"p\">{`_options`}</inlineCode>{` can contain the following values:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`dialogOptions: string`}</inlineCode>{`. This value controls how Photoshop shows UI during the execution of the command. The possible values are:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`\"silent\": The command is executed without UI. If an error occurs, or if the command needs additional parameters, then a scripting error is returned. This is the default value.`}</li>\n          <li parentName=\"ul\">{`\"dontDisplay\": The command is executed without UI unless an error occurs, or if the command need additional parameters. In that case UI may be shown.`}</li>\n          <li parentName=\"ul\">{`\"display\": Standard UI related to the command is shown.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"options\"\n    }}>{`options`}</h3>\n    <p>{`The second argument of batchPlay adjusts the options. Below is the list of options that are most commonly needed.`}</p>\n    <h4 {...{\n      \"id\": \"synchronousexecution-default-false\"\n    }}>{`synchronousExecution (default: false)`}</h4>\n    <p>{`If set to true, batchPlay will block the entire scripting thread until it resolves, then return the value(s). We use this in the DOM API for property getters and setters, as it allows for simpler code.`}</p>\n    <p>{`JavaScript code that use batchPlay directly should avoid using this keyword if possible, and instead use the default form that returns a promise.`}</p>\n    <h4 {...{\n      \"id\": \"historystateinfo-default-none\"\n    }}>{`historyStateInfo (default: none)`}</h4>\n    <p>{`This option is deprecated as of Photoshop 2022. New JavaScript code should use the history suspension mechanism provided by `}<a parentName=\"p\" {...{\n        \"href\": \"./executeasmodal#history-state-suspension\"\n      }}>{`executeAsModal`}</a></p>\n    <p>{`Request Photoshop to describe the entire batchPlayed series of actions as a single history state. History state should have two properties:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`name`}</inlineCode>{`: A string to show the name of the history event in History panel`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`target`}</inlineCode>{`: A document reference for where to create the history state at. Keep in mind that if you point at a different document, or if your batchPlays aren't all acting on the same document, the behavior is undefined.`}</p>\n        <p parentName=\"li\">{`Plugins that use api version 2 may find it easier to use the history state functionality that is provided via the executionContext object.`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"result-value\"\n    }}>{`Result value`}</h3>\n    <p><inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` returns a promise. This promise is rejected if the batchPlay command is invalid. This is the case when incorrect arguments are provided. An example of a batchPlay rejection is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require(\"photoshop\").action.batchPlay(true, {});\n`}</code></pre>\n    <p>{`This example provides an incorrect initial argument to batchPlay. The initial argument is expected to be a descriptor list and not a boolean. For cases such as this, the promise is rejected with an appropriate error message. The above example generates the following rejection:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[[PromiseState]]: \"rejected\"\n[[PromiseResult]]: Error: Argument 1 has an invalid type. Expected type: array actual type: boolean\n`}</code></pre>\n    <p>{`A batchPlay command can also fail if a valid command cannot be procesed by Photoshop. This is most often the case if the specified target element does not exist.`}</p>\n    <p>{`The previously shown example to `}<a parentName=\"p\" {...{\n        \"href\": \"#hidelayerexample\"\n      }}>{`hide the active layer`}</a>{` will fail if no documents are open, because the command can then not find the target layer to hide. For such cases the `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` promise is resolved successfully, and an error message is returned in a list form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[\n  {\n  _obj: \"error\"\n  message: \"The object “current document” is not currently available.\"\n  result: -25922\n  }\n]\n`}</code></pre>\n    <p>{`The elements in the returned list match the action descriptor list passed to batchPlay. The first item in the returned list is the result of the first action descriptor in the batchPlay, and so forth. The properties of the returned elements are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`_obj: string`}</inlineCode>{`. The value is \"Error\"`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`message: string`}</inlineCode>{`. A localized error message`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`result: number`}</inlineCode>{`. An internal Photoshop error code. A \"0\" means \"no error\". -128 means that the user cancelled the operation. Other values are possible.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"action-references\"\n    }}>{`Action references`}</h3>\n    <p>{`Action references specify which DOM objects a command operates on. An action reference is specified using the `}<inlineCode parentName=\"p\">{`_target`}</inlineCode>{` keyword.\nAn action reference is a list of item references that specifies how to find the DOM element starting from the application DOM element.\nEach item in the list can use one of the following forms:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reference form`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Syntax`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Example`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Notes`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ID`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{_ref:className, _id:number}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{_ref:\"document\", _id: 123}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{_ref:className, _index:number}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{_ref:\"document\", _index: 1}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Indices are 1 based`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{_ref:className, _name:string}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{_ref:\"document\", _name: \"Untitled-1\"}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Enumeration`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{_ref:className, _enum: \"ordinal\", _value: enumerationSpecifier*}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{_ref:\"document\", _enum: \"ordinal\", _value:\"targetEnum\"}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{_property:propertyName}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{_property:\"title\"}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`We recommend using the ID form whenever possible because the ID of an object does not change during the lifetime of the Photoshop session. The index will change if elements are added or removed in front of the specified object.`}</p>\n    <p>{`The enumerationSpecifier is command specific, but the most common value is `}<inlineCode parentName=\"p\">{`targetEnum`}</inlineCode>{` meaning the currently selected or active object of the specified class. Other possible values include: \"first\", \"last\", and \"front\". When using the enumeration form, `}<inlineCode parentName=\"p\">{`targetEnum`}</inlineCode>{` is the default value for the `}<inlineCode parentName=\"p\">{`_value`}</inlineCode>{` property.`}</p>\n    <h3 {...{\n      \"id\": \"getting-state-from-photoshop\"\n    }}>{`Getting state from Photoshop`}</h3>\n    <p>{`batchPlay can be used to obtain state from Photoshop. To do this, use the action command \"get\" with a target property.`}</p>\n    <p>{`The following sample obtains the title of a target document.:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var target = {_ref:[{\"_property\": \"title\"}, {_ref: \"document\", _id: someDocumentID}, {\"_ref\":\"application\"}]};\nvar command = {\"_obj\": \"get\", \"_target\": target};\nlet result = await photoshop.action.batchPlay([command], {});\n`}</code></pre>\n    <p>{`A possible result from running this command is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[{\"title\":\"Untitled-1\"}]\n`}</code></pre>\n    <p>{`If you use the \"get\" command without a target property, then all possible properties for the target are returned. The following lists all possible document properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var target = {_ref:[{_ref: \"document\", _id: someDocumentID}, {\"_ref\":\"application\"}]};\nvar command = {\"_obj\": \"get\", \"_target\": target};\nlet result = await photoshop.action.batchPlay([command], {});\n`}</code></pre>\n    <p>{`A possible result from running this command may include the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[{\"mode\":{\"_enum\":\"colorSpace\",\"_value\":\"RGBColor\"},\"bigNudgeH\":655360,\"bigNudgeV\":655360,\"rulerOriginH\":0,\"rulerOriginV\":0,\"width\":{\"_unit\":\"distanceUnit\",\"_value\":504},\"height\":{\"_unit\":\"distanceUnit\",\"_value\":360},\"resolution\":{\"_unit\":\"densityUnit\",\"_value\":300},\"title\":\"Untitled-1\",\"fileInfo\":{\"_obj\":\"fileInfo\"},\"numberOfPaths\":0,\"numberOfChannels\":3,\"numberOfLayers\":0,\"targetPathIndex\":-1,\"workPathIndex\":-1,\"clippingPathInfo\":{\"_obj\":\"clippingInfo\",\"clippingPathIndex\":-1,\"clippingPathFlatness\":0}, . . . ]\n`}</code></pre>\n    <p>{`Using \"get\" without a property is intended for use only during the development of a plugin. This \"get all\" request allows a developer to understand which properties a given element supports.`}</p>\n    <p><em parentName=\"p\">{`A shipping plugin should not obtain all properties for a given target because this may be slow, and may become slower in the future when additional properties are added.`}</em></p>\n    <h4 {...{\n      \"id\": \"multi-get\"\n    }}>{`Multi-Get`}</h4>\n    <p>{`In some cases you may want to obtain several property values from the same target, or get the same property from several similar targets.\nExamples of this are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Get the name, the id, and the color mode for a specific document.`}</li>\n      <li parentName=\"ul\">{`Get the id's of all open documents.`}</li>\n    </ul>\n    <p>{`While you can issue multiple \"get\" statements to get this information, it is more efficient to use the `}<inlineCode parentName=\"p\">{`multiGet`}</inlineCode>{` command.\nA multiGet command has the following form:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`_obj`}</inlineCode>{`: must be \"multiGet\".`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`_target`}</inlineCode>{`: a target reference that specifies a base object.`}</li>\n      <li parentName=\"ul\">{`extendedReference: a list describing what values to return from the base object. The extendedReference has either one or two elements. The first element is a property-list. The second element can be used to specify an element range.`}</li>\n      <li parentName=\"ul\">{`options: describes how the command should react if any of the requested values are unavailable. options can include:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`failOnMissingProperty: A boolean describing what should happen if one of the target elements do not expose one of the requested properties. The default value is true, meaning that the command fails if a requested property is not available.`}</li>\n          <li parentName=\"ul\">{`failOnMissingElement: A boolean describing what should happen if one of the target elements do exist. The default value is true, meaning that the command fails if any of the requested element do not exist.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`The following example illustrates how to get the value of multiple properties on the active layer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`layerProperties =\n  { _obj: \"multiGet\",\n     _target: {_ref: [{_ref: \"layer\", _enum: \"ordinal\"}, {_ref: \"document\", _enum: \"ordinal\"}]},\n     extendedReference: [[\"name\", \"layerID\", \"opacity\"]],\n     options: {failOnMissingProperty:false, failOnMissingElement: false}\n  };\nresult = await require(\"photoshop\").action.batchPlay([layerProperties], {});\n`}</code></pre>\n    <p>{`This command will generate a result such as the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[{\"name\":\"Layer 4\",\"layerID\":5,\"opacity\":255}]\n`}</code></pre>\n    <p>{`In this example the base object is a layer. The extendedReference specifies the list of properties to return from the target layer.`}</p>\n    <p>{`The following example illustrates how to get the value of multiple properties on the first two layers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`layerProperties =\n  { _obj: \"multiGet\",\n     _target: {_ref: [{_ref: \"document\", _enum: \"ordinal\"}]},\n     extendedReference: [[\"name\", \"layerID\", \"opacity\"], {_obj: \"layer\", index:1, count:2}],\n     options: {failOnMissingProperty:false, failOnMissingElement: false}\n  };\nresult = await require(\"photoshop\").action.batchPlay([layerProperties], {});\n`}</code></pre>\n    <p>{`This command will generate a result such as the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[{\"list\":[{\"name\":\"Layer 1\",\"layerID\":2,\"opacity\":255},{\"name\":\"Layer 2\",\"layerID\":3,\"opacity\":255}]}]\n`}</code></pre>\n    <p>{`In this example we want to obtain the value from several layers, and this mean that the base object as specified by the `}<inlineCode parentName=\"p\">{`_target`}</inlineCode>{` is a document. The extendedReference is used in its two element form to specify a property list and a range of layers.`}</p>\n    <p>{`The element range specifier can use count equal to -1 to specify all elements. Therefore to get the name of all layers in a document, one can use the following multiGet command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`layerProperties =\n  { _obj: \"multiGet\",\n     _target: {_ref: [{_ref: \"document\", _enum: \"ordinal\"}]},\n     extendedReference: [[\"name\"], {_obj: \"layer\", index:1, count:-1}],\n     options: {failOnMissingProperty:false, failOnMissingElement: false}\n  };\nresult = await require(\"photoshop\").action.batchPlay([layerProperties], {});\n`}</code></pre>\n    <p>{`This command will generate a result such as the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[{\"list\":[{\"name\":\"Layer 1\"},{\"name\":\"Layer 2\"},{\"name\":\"Layer 3\"},{\"name\":\"Layer 4\"}]}]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"legacy-notes\"\n    }}>{`Legacy notes`}</h2>\n    <p><inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` is the evolution of `}<inlineCode parentName=\"p\">{`executeAction`}</inlineCode>{` from ExtendScript. Where `}<inlineCode parentName=\"p\">{`executeAction`}</inlineCode>{` could only play one descriptor at a time, `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{` accepts an array of action descriptors.`}</p>\n    <p>{`In ExtendScript, we provided a class around constructing descriptors, references, and putting values in. With `}<inlineCode parentName=\"p\">{`batchPlay`}</inlineCode>{`, we have replaced these related classes with `}<inlineCode parentName=\"p\">{`actionJSON`}</inlineCode>{`.`}</p>\n    <p>{`If you have used `}<inlineCode parentName=\"p\">{`executeAction`}</inlineCode>{` in ExtendScript, you are probably familiar with 4 character codes (OSTypes) and helper methods around them. In `}<inlineCode parentName=\"p\">{`actionJson`}</inlineCode>{` we prefer extended string identifiers such as `}<inlineCode parentName=\"p\">{`colorSampler`}</inlineCode>{`. However, you can still use an OSType by prepending it with a `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` sign and passing that as a string, like `}<inlineCode parentName=\"p\">{`'$app '`}</inlineCode>{` (mind the space!).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","id","isMDXComponent"],"sourceRoot":""}