{"version":3,"sources":["webpack:///./src/pages/uxp/known-issues.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-uxp-known-issues-md-120b1ed0800f68b97f8f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-parliament/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"known-issues\"\n    }}>{`Known Issues`}</h1>\n    <p>{`The following issues are known to occur with UXP 4.1 and Photoshop 22.0.0. Please check this page with future updates, as known issues will be fixed over time, and new issues will likely be discovered.`}</p>\n    <h2 {...{\n      \"id\": \"general-issues\"\n    }}>{`General Issues`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Panel icons must always be 23x23 (46x46) PNG files. SVG icons are not supported on Photoshop toolbars.`}</li>\n      <li parentName=\"ul\">{`Plugin icons must always be 24x24 (48x48) files. In the manifest, they must currently be specified with `}<inlineCode parentName=\"li\">{`width: 48`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`height: 48`}</inlineCode>{`. Plugin icons do support SVG files, but UXP doesn't support all SVG features, which means you'll want to test your SVG icon before shipping your plugin if you decide to use SVG icons in the Plugin Panel.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"user-interface\"\n    }}>{`User Interface`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`window.devicePixelRatio`}</inlineCode>{` (and corresponding `}<inlineCode parentName=\"li\">{`element.uxpContainer.devicePixelRatio`}</inlineCode>{`) always returns `}<inlineCode parentName=\"li\">{`1`}</inlineCode>{`. This is incorrect and will be fixed in the future. Note that `}<inlineCode parentName=\"li\">{`window.devicePixelRatio`}</inlineCode>{` may not always match an element's pixel ratio if the element is visible on a screen with a different pixel ratio from the primary screen.`}</li>\n      <li parentName=\"ul\">{`Not all SVG files are supported by UXP. UXP's SVG renderer is targeted for simple icons and the like; complex SVGs may fail to render completely, or may render in unexpected ways. The SVG renderer will improve in the future.`}</li>\n      <li parentName=\"ul\">{`Images formatted in a grayscale mode will fail to render. They will take up space in the DOM, but will not be visible to the user.`}</li>\n      <li parentName=\"ul\">{`When the mouse cursor is changed, it may not revert back to its original state in UWP.`}</li>\n      <li parentName=\"ul\">{`It is not possible to trigger the emoji selector in a text field on macOS.`}</li>\n      <li parentName=\"ul\">{`Many SVGs are known to render in odd ways in the UI. These issues will be addressed in the future, but we would love to hear your reports of any SVGs that don't work, and how you fixed it.`}</li>\n      <li parentName=\"ul\">{`When tabbing in a scroll view, the scroll view is not automatically scrolled to ensure the target control is in view (macOS Only).`}</li>\n      <li parentName=\"ul\">{`Emojis are rendered in the font color on Windows 10, instead of using the emoji's colors.`}</li>\n      <li parentName=\"ul\">{`When a control in a panel is disabled and enabled, it is no longer reachable via TAB. This may also impact controls added `}<em parentName=\"li\">{`after`}</em>{` a panel is shown for the first time.`}</li>\n      <li parentName=\"ul\">{`Drag and Drop is not currently supported.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`Save`}</inlineCode>{` dialog that appears when using `}<inlineCode parentName=\"li\">{`getFileForSaving`}</inlineCode>{` appears `}<em parentName=\"li\">{`behind`}</em>{` the plugin panels. The `}<inlineCode parentName=\"li\">{`Open`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Folder`}</inlineCode>{` dialogs may also do this on occasion on both macOS and Windows. This will be fixed in a future release.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uxpshowpanel`}</inlineCode>{` and the corresponding `}<inlineCode parentName=\"li\">{`show`}</inlineCode>{` callback occurs only once, when the panel is initially made visible. It will not recur. This will be fixed in the future.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uxphidepanel`}</inlineCode>{` and the corresponding `}<inlineCode parentName=\"li\">{`hide`}</inlineCode>{` callback never occurs, even when the panel is made invisible. This will be fixed in the future.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uxpcommand`}</inlineCode>{` will incude `}<inlineCode parentName=\"li\">{`uxpshowpanel`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`uxphidepanel`}</inlineCode>{` in the `}<inlineCode parentName=\"li\">{`commandId`}</inlineCode>{` field of the event whenever panels are shown and hidden. For plugins `}<em parentName=\"li\">{`with a single panel`}</em>{`, this is sufficient to detect that your panel's state has changed. If your plugin has multiple panels, there is no way (at this time) to detect which panel was shown or hidden.`}</li>\n      <li parentName=\"ul\">{`Interactive elements swallow most events.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keypress`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`keyup`}</inlineCode>{` are not currently supported.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"html-elements\"\n    }}>{`HTML Elements`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<option>`}</inlineCode>{` tags `}<em parentName=\"li\">{`must`}</em>{` have a `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` attribute, or referencing the `}<inlineCode parentName=\"li\">{`select`}</inlineCode>{`'s `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` property will return `}<inlineCode parentName=\"li\">{`undefined`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<select value=\"…\"/>`}</inlineCode>{` does not show the value as selected. Instead, get a reference to the element and call `}<inlineCode parentName=\"li\">{`setAttribute(\"value\", …)`}</inlineCode>{` or use the `}<inlineCode parentName=\"li\">{`selected`}</inlineCode>{` attribute on the `}<inlineCode parentName=\"li\">{`option`}</inlineCode>{` tags.`}</li>\n      <li parentName=\"ul\">{`If you don’t specify a width for your `}<inlineCode parentName=\"li\">{`form`}</inlineCode>{`, block elements inside may not take up the entire width. Workaround: always set a width for your `}<inlineCode parentName=\"li\">{`form`}</inlineCode>{` elements.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`form`}</inlineCode>{`s only support `}<inlineCode parentName=\"li\">{`method=\"dialog\"`}</inlineCode>{`. They do not submit to a URL automatically.`}</li>\n      <li parentName=\"ul\">{`It is not currently possible to specify the tab order.`}</li>\n      <li parentName=\"ul\">{`The size of a `}<inlineCode parentName=\"li\">{`<textarea>`}</inlineCode>{` cannot be set with `}<inlineCode parentName=\"li\">{`rows`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`cols`}</inlineCode>{`. Use CSS styles `}<inlineCode parentName=\"li\">{`height`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`width`}</inlineCode>{` respectively.`}</li>\n      <li parentName=\"ul\">{`HTML5 input validation is not supported.`}</li>\n      <li parentName=\"ul\">{`Images that fail to load will not render any “broken icon” image in place.`}</li>\n      <li parentName=\"ul\">{`Input elements do not accept `}<inlineCode parentName=\"li\">{`defaultValue`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<option>`}</inlineCode>{` tags do not support `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{` attributes.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<label for=\"id\"/>`}</inlineCode>{` is not supported. Wrap `}<inlineCode parentName=\"li\">{`<label>`}</inlineCode>{` around the control instead.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<input type=\"file\" />`}</inlineCode>{` is not supported.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<input type=\"color\" />`}</inlineCode>{` is not supported.`}</li>\n      <li parentName=\"ul\">{`Using unitless values in `}<inlineCode parentName=\"li\">{`width`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`height`}</inlineCode>{` attributes are not supported in UXP 3.1. Use `}<inlineCode parentName=\"li\">{`px`}</inlineCode>{`, or CSS styles.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<label>`}</inlineCode>{` uses `}<inlineCode parentName=\"li\">{`inline-flex`}</inlineCode>{` layout semantics in UXP 3.1 mode, with `}<inlineCode parentName=\"li\">{`flex-wrap: wrap`}</inlineCode>{` enabled. If you need to prevent wrapping, use `}<inlineCode parentName=\"li\">{`flex-wrap: nowrap`}</inlineCode>{` on these elements. Note that the default layout behavior is now `}<em parentName=\"li\">{`horizontal`}</em>{` not `}<em parentName=\"li\">{`vertical`}</em>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<progress>`}</inlineCode>{` is not theme aware.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"layout\"\n    }}>{`Layout`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`When rendering inline text that wraps, borders, outlines, and backgrounds only apply to the first line. You should place borders, outlines, and backgrounds on elements with block layout semantics.`}</li>\n      <li parentName=\"ul\">{`Mixing inline text with UI controls is unlikely to result in a pleasant appearance. `}<inlineCode parentName=\"li\">{`vertical-align`}</inlineCode>{` is supported, but baseline layout does not always do what you might expect,  which makes it difficult to properly align widgets and labels. As such, you should use `}<inlineCode parentName=\"li\">{`flex`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`inline-flex`}</inlineCode>{` when using UI elements.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"css\"\n    }}>{`CSS`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`It is not currently possible to assign multiple border colors to a container.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`baseline`}</inlineCode>{` alignment is supported, but buggy; do not rely on its behavior for now.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`font`}</inlineCode>{` shorthand CSS rule is not supported.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`text-transform`}</inlineCode>{` is not supported,`}</li>\n      <li parentName=\"ul\">{`CSS transitions and animations are not supported.`}</li>\n      <li parentName=\"ul\">{`A solid `}<inlineCode parentName=\"li\">{`outline`}</inlineCode>{` will not render unless a color is also provided. When using `}<inlineCode parentName=\"li\">{`outline: solid`}</inlineCode>{`, be sure to supply an outline color as well.`}</li>\n      <li parentName=\"ul\">{`Font sizes do not adjust to dynamic units like `}<inlineCode parentName=\"li\">{`vh`}</inlineCode>{`. As such, if you use `}<inlineCode parentName=\"li\">{`font-size: 1vh`}</inlineCode>{`, and the viewport changes size, the font size will not adjust.`}</li>\n      <li parentName=\"ul\">{`Setting a `}<inlineCode parentName=\"li\">{`border-color`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`unset`}</inlineCode>{` may not reset the color to its initial value.`}</li>\n      <li parentName=\"ul\">{`Borders and backgrounds are not drawn correctly when coupled with `}<inlineCode parentName=\"li\">{`object-fit`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The bottom border may not always render with the same width as the other borders.`}</li>\n      <li parentName=\"ul\">{`Underlines may render very thin.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`calc`}</inlineCode>{` only works for length/numeric properties. Using `}<inlineCode parentName=\"li\">{`calc`}</inlineCode>{` for a color will not work.`}</li>\n      <li parentName=\"ul\">{`If you need to override an anchor link color, use `}<inlineCode parentName=\"li\">{`a[href]`}</inlineCode>{` as the selector to override it.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"dom\"\n    }}>{`DOM`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`When a dialog is closed, it is not removed from the DOM. This is per spec. If you want the dialog to be removed from the DOM, you must call `}<inlineCode parentName=\"li\">{`HTMLDialogElement#remove`}</inlineCode>{` explicitly.`}</li>\n      <li parentName=\"ul\">{`When applying HTML using `}<inlineCode parentName=\"li\">{`innerHTML`}</inlineCode>{`, event handlers and scripts are currently parsed in Photoshop, but not in XD. `}<strong parentName=\"li\">{`DO NOT RELY ON THIS BEHAVIOR`}</strong>{`, as it will likely go away in the future and match XD's behavior (which is by design).`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"network-io\"\n    }}>{`Network I/O`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`On macOS, it is not possible to use self-signed certificates with secure Websockets.`}</li>\n      <li parentName=\"ul\">{`Websockets do not support extensions.`}</li>\n      <li parentName=\"ul\">{`XHR can only send binary content using an ArrayBuffer -- Blob is not supported.`}</li>\n      <li parentName=\"ul\">{`XHR does not support cookies.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`responseURL`}</inlineCode>{` is not supported on XHR`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"file-io\"\n    }}>{`File I/O`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Blob`}</inlineCode>{` is not supported. Use `}<inlineCode parentName=\"li\">{`ArrayBuffer`}</inlineCode>{` instead.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"debugging\"\n    }}>{`Debugging`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`If debugging exposes any private fields and methods, do not attempt to use them. Plugins referring to private APIs may be rejected or removed from the Plugin Marketplace, and will be prone to breaking unexpectedly.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}