{"version":3,"file":"component---src-pages-guides-how-to-index-md-872377c2fbbfe9bc8ff7.js","mappings":"4SAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,YADR,gBAGA,+RACA,eACE,GAAM,oBADR,qBAGA,0JACA,eACE,GAAM,8CADR,WAEc,uBAAYC,WAAW,MAAvB,YAFd,iCAGA,mDAAoC,uBAAYA,WAAW,KAAvB,YAApC,8CAAsI,uBAAYA,WAAW,KAAvB,UAAtI,8FAAsR,uBAAYA,WAAW,KAAvB,WAAtR,wCACA,8FACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,8NAgBL,2GACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,mGAML,0BAAW,uBAAYA,WAAW,KAAvB,WAAX,iRAA+U,uBAAYA,WAAW,KAAvB,OAA/U,2CACA,mBAAG,uBAAYA,WAAW,KAAvB,uDACH,eACE,GAAM,qCADR,sCAGA,uDAAwC,uBAAYA,WAAW,KAAvB,qBAAxC,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,4LAML,eACE,GAAM,sCADR,wCAGA,+IAAgI,uBAAYA,WAAW,KAAvB,SAAhI,0IAA2T,eAAIA,WAAW,KAAf,UAA3T,SAAsW,uBAAYA,WAAW,KAAvB,SAAtW,kDAAyc,uBAAYA,WAAW,KAAvB,SAAzc,2CACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,kEAML,2DAA4C,uBAAYA,WAAW,KAAvB,SAA5C,SAAsG,uBAAYA,WAAW,KAAvB,SAAtG,0CAAiM,uBAAYA,WAAW,KAAvB,YAAjM,uIAA4X,cAAGA,WAAW,IACtY,KAAQ,qFADgX,QAA5X,MAGA,eACE,GAAM,yBADR,0BAGA,eACE,GAAM,sDADR,uDAGA,4JACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,gUASL,eACE,GAAM,6DADR,8DAGA,qEACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,sQAWL,eACE,GAAM,WADR,aAGA,iGACA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,8DAAiF,eAAIA,WAAW,KAAf,aAAjF,sFAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,wGAA2H,eAAIA,WAAW,KAAf,QAA3H,wFAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,8MAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,2PAA8Q,uBAAYA,WAAW,KAAvB,SAA9Q,uDAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,qBAAwC,uBAAYA,WAAW,KAAvB,kBAAxC,yRAGJ,eACE,GAAM,sBADR,uBAGA,mCACA,eACE,GAAM,uBADR,wBAGA,kCACA,eACE,GAAM,yBADR,0BAGA,eACE,GAAM,iCADR,kCAGA,6LACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,iGAOR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://uxp-photoshop-documentation/./src/pages/guides/how-to/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp-photoshop/uxp-photoshop/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-do-i\"\n    }}>{`How Do I...`}</h1>\n    <p>{`This section provides snippets of HTML, CMS, and JavaScript code needed to accomplish common operations needed in many plugins. There are no complete plugins in this section, only code snippets. Copy and paste these snippets into sections of your plugin as needed.`}</p>\n    <h2 {...{\n      \"id\": \"basic-javascript\"\n    }}>{`Basic JavaScript`}</h2>\n    <p>{`If you're already a JavaScript expert, skip this section. But if you're coming to UXP from ExtendScript, you might want to read it.`}</p>\n    <h3 {...{\n      \"id\": \"how-to-include-an-external-javascript-file\"\n    }}>{`How to `}<inlineCode parentName=\"h3\">{`#include`}</inlineCode>{` An External JavaScript File`}</h3>\n    <p>{`JavaScript has never had the `}<inlineCode parentName=\"p\">{`#include`}</inlineCode>{` syntax of C and its descendants, nor the `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{` of Python. However, recent JavaScript (including that used in UXP) has \"modules\" and the `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` statement. Here's how to use them:`}</p>\n    <p>{`In the JavaScript file you want to be included, structure it like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// file \"includeMe.js\"\n// this file will be included by some other file\nfunction foo(someNumber) {\n    return(someNumber * 2);\n}\n\nfunction bar() {\n    return(42);\n}\nmodule.exports = {\n    foo,\n    bar\n}\n`}</code></pre>\n    <p>{`and then in the file that wants to include the above file, add this line at the top:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {foo, bar} = require(\"./includeMe.js\");\n. . .\n    result = foo(3); // will return 6\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` in UXP isn't as robust as some other include systems (e.g., it doesn't search any global paths to find the file you want), but careful use of relative paths allows you to structure your plugin directory the way you want. For example, you can have a subdirectory named `}<inlineCode parentName=\"p\">{`lib`}</inlineCode>{` and require a file in there this way:`}</p>\n    <p><inlineCode parentName=\"p\">{`const {foo, bar} = require(\"./lib/includeMe.js\");`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"how-to-write-debugging-statements\"\n    }}>{`How to write debugging statements`}</h3>\n    <p>{`This one is easy. It's no longer `}<inlineCode parentName=\"p\">{`console.writeln()`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(\"foo\"); // writes \"foo\" to the UXP Developer Tool console.\n\nconsole.error(\"foo\"); // does the same thing, but the text is shown in red so errors are more easily seen.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"how-to-use-promises-and-asyncawait\"\n    }}>{`How to Use Promises and async/await`}</h3>\n    <p>{`This is one of the most puzzling features of modern JavaScript for those new to the latest language versions. Basically, `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{` allows your code to wait for an operation to complete, without blocking the host application (e.g., Photoshop). But the trick is you `}<em parentName=\"p\">{`cannot`}</em>{` use `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{` in a regular function; any function in which `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{` is used has to be declared like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    async function foo(argument1, argument2...) {\n\n    }\n`}</code></pre>\n    <p>{`This is a very cavilier treatment of `}<inlineCode parentName=\"p\">{`async`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{`, which are actually part of a larger `}<inlineCode parentName=\"p\">{`promises`}</inlineCode>{` feature in JavaScript. For the real story, consult your favorite search engine. You might start with the highly regarded MDN page `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\"\n      }}>{`here`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"uxp-specific-snippets\"\n    }}>{`UXP-specific Snippets`}</h2>\n    <h3 {...{\n      \"id\": \"how-to-determine-the-host-and-os-a-plugin-is-using\"\n    }}>{`How to determine the host and OS a plugin is using`}</h3>\n    <p>{`Sometimes it's necesssary (for localization or other reasons) to find out what a plugin's host environment is. Here's how to do that:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const host = require('uxp').host;\nconst locale = host.uiLocale;\nconst hostName = host.name\nconst hostVersion = host.version;\nconst hostOS = require('os').platform(); // note that this is a method, not a property\nconsole.log(\\`locale: \\${locale}  host \\${hostName} version \\${hostVersion} running on \\${hostOS}\\`);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"how-to-get-notified-that-your-panel-is-opening-or-closing\"\n    }}>{`How to get notified that your panel is opening or closing`}</h3>\n    <p>{`In your startup code, add something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`document.addEventListener('uxpcommand', (event) => {\n  const { commandId } = event\n  if (commandId === 'uxpshowpanel') {\n    console.log(\"panel is showing\");\n  } else if (commandId === 'uxphidepanel') {\n    console.log('panel is hiding');\n  }\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"file-io\"\n    }}>{`File I/O`}</h2>\n    <p>{`Files and folders in UXP for Photoshop can exist in four different places:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Your plugin's home directory. Files in this directory are `}<em parentName=\"p\">{`read-only`}</em>{`. This is a good place to keep localizations, data files that never change, etc.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Your plugin's data directory. This is a directory managed by UXP which allows read/write access for `}<em parentName=\"p\">{`only`}</em>{` your plugin. Files in this directory survive application restarts and OS reboots.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Your plugin's temp directory. This is a place to store session-specific data which will not necessarily persist. You shouldn't rely on anything in this directory lasting beyond an application restart.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The host OS filesystem. Access to specific files or folders in the computer's filesystem must be requested of the user by your plugin, by showing a file or folder picker. If the user selects a file and does not cancel, your plugin code receives a `}<inlineCode parentName=\"p\">{`token`}</inlineCode>{` which you can use to access that file or folder.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`UXP also provids `}<inlineCode parentName=\"p\">{`Secure Storage`}</inlineCode>{`. This is a UXP-managed facility that holds encrypted key/value pairs. This is good for storing login information and any other data that needs to be securely stored. As such, it's not for general file access, but if you're not writing a lot of data it might be appropriate.`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"how-to-read-a-file\"\n    }}>{`How to Read a File`}</h3>\n    <p>{`Coming soon.`}</p>\n    <h3 {...{\n      \"id\": \"how-to-write-a-file\"\n    }}>{`How to Write a File`}</h3>\n    <p>{`Coming Soon`}</p>\n    <h2 {...{\n      \"id\": \"other-useful-snippets\"\n    }}>{`Other Useful Snippets`}</h2>\n    <h3 {...{\n      \"id\": \"how-to-display-a-simple-alert\"\n    }}>{`How to Display a Simple Alert`}</h3>\n    <p>{`Sometimes you don't need a complicated dialog box, just a simple alert message. If you don't need any icons or special branding in your alert, this will do the trick:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const psCore = require('photoshop').core;\npsCore.showAlert({ message: 'Warp Factor 9!'});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}